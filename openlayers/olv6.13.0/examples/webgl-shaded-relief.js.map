{"version":3,"file":"webgl-shaded-relief.js","mappings":"gJAKMA,EAAY,GAUlB,SAASC,EAAUC,EAASC,GAC1B,MAAO,CACL,IACA,CAAC,IAAK,IAAK,CAAC,OAAQ,EAAGD,EAASC,IAChC,CACE,IACA,CAAC,IAAK,IAAS,CAAC,OAAQ,EAAGD,EAASC,IACpC,CAAC,IAAK,IAAS,CAAC,OAAQ,EAAGD,EAASC,MAO1C,IAAMC,EAAK,CAAC,IAAK,EAAG,CAAC,eACfC,EAAM,CAAC,IAAK,CAAC,MAAO,QAASJ,GAAW,EAAG,IAE3CK,EAAO,CAAC,IAAK,CAAC,IADR,CAAC,IAAK,CAAC,MAAO,QAASL,EAAU,EAAG,IAClBI,GAAMD,GAC9BG,EAAM,CAAC,IAAK,CAAC,MAAO,QAASN,EAAU,GAAI,IAE3CO,EAAO,CAAC,IAAK,CAAC,IADR,CAAC,IAAK,CAAC,MAAO,QAASP,EAAU,EAAG,IAClBM,GAAMH,GAC9BK,EAAQ,CAAC,OAAQ,CAAC,IAAK,CAAC,IAAK,CAAC,IAAKH,EAAM,GAAI,CAAC,IAAKE,EAAM,IAAK,KAC9DE,EAAS,CAAC,QAAS,CAAC,OAAQ,CAAC,IAAK,EAAGJ,GAAOE,IAAQG,KAAKC,GAAID,KAAKC,IAClEC,EAAQ,CAAC,IAAKF,KAAKC,GAAK,IAAK,CAAC,MAAO,UAQrCE,EAAS,CAAC,IAAK,IALA,CACnB,IACA,CAAC,IAAK,CAAC,MAAOD,GAAQ,CAAC,MAAOJ,IAC9B,CAAC,IAAK,CAAC,IAAK,CAAC,MAAOI,GAAQ,CAAC,MAAOJ,IAAS,CAAC,MAAO,CAAC,IAL1C,CAAC,IAAKE,KAAKC,GAAK,IAAK,CAAC,MAAO,UAKyBF,OAI9DK,EAAe,IAAIC,EAAAA,EAAU,CACjCC,QAAS,GACTC,OAAQ,IAAIC,EAAAA,EAAI,CACdC,IAAK,gEAEPC,MAAO,CACLrB,UAAWA,EACXsB,MAAO,CAAC,QAASR,EAAQA,EAAQA,MAIlB,CAAC,OAAQ,QAAS,SAC1BS,SAAQ,SAAUC,GAC3B,IAAMC,EAAUC,SAASC,eAAeH,GAClCI,EAASF,SAASC,eAAeH,EAAK,OAC5C,SAASK,IACPD,EAAOE,UAAYL,EAAQM,MAC3B/B,EAAUwB,GAAMQ,OAAOP,EAAQM,OAEjCF,IACA,IAAMI,EAAW,WACfJ,IACAd,EAAamB,qBAAqBlC,IAEpCyB,EAAQU,iBAAiB,QAASF,GAClCR,EAAQU,iBAAiB,SAAUF,MAGzB,IAAIG,EAAAA,EAAI,CAClBC,OAAQ,MACRC,OAAQ,CACN,IAAItB,EAAAA,EAAU,CACZE,OAAQ,IAAIqB,EAAAA,IAEdxB,GAEFyB,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,EAAE,SAAU,SAAU,SAAU,SACxCC,OAAQ,EAAE,SAAU,SACpBC,QAAS,GACTC,QAAS,GACTC,KAAM,S","sources":["webpack:///./webgl-shaded-relief.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {OSM, XYZ} from '../src/ol/source.js';\nimport {WebGLTile as TileLayer} from '../src/ol/layer.js';\n\nconst variables = {};\n\n// The method used to extract elevations from the DEM.\n// In this case the format used is\n// red + green * 2 + blue * 3\n//\n// Other frequently used methods include the Mapbox format\n// (red * 256 * 256 + green * 256 + blue) * 0.1 - 10000\n// and the Terrarium format\n// (red * 256 + green + blue / 256) - 32768\nfunction elevation(xOffset, yOffset) {\n  return [\n    '+',\n    ['*', 256, ['band', 1, xOffset, yOffset]],\n    [\n      '+',\n      ['*', 2 * 256, ['band', 2, xOffset, yOffset]],\n      ['*', 3 * 256, ['band', 3, xOffset, yOffset]],\n    ],\n  ];\n}\n\n// Generates a shaded relief image given elevation data.  Uses a 3x3\n// neighborhood for determining slope and aspect.\nconst dp = ['*', 2, ['resolution']];\nconst z0x = ['*', ['var', 'vert'], elevation(-1, 0)];\nconst z1x = ['*', ['var', 'vert'], elevation(1, 0)];\nconst dzdx = ['/', ['-', z1x, z0x], dp];\nconst z0y = ['*', ['var', 'vert'], elevation(0, -1)];\nconst z1y = ['*', ['var', 'vert'], elevation(0, 1)];\nconst dzdy = ['/', ['-', z1y, z0y], dp];\nconst slope = ['atan', ['^', ['+', ['^', dzdx, 2], ['^', dzdy, 2]], 0.5]];\nconst aspect = ['clamp', ['atan', ['-', 0, dzdx], dzdy], -Math.PI, Math.PI];\nconst sunEl = ['*', Math.PI / 180, ['var', 'sunEl']];\nconst sunAz = ['*', Math.PI / 180, ['var', 'sunAz']];\n\nconst cosIncidence = [\n  '+',\n  ['*', ['sin', sunEl], ['cos', slope]],\n  ['*', ['*', ['cos', sunEl], ['sin', slope]], ['cos', ['-', sunAz, aspect]]],\n];\nconst scaled = ['*', 255, cosIncidence];\n\nconst shadedRelief = new TileLayer({\n  opacity: 0.3,\n  source: new XYZ({\n    url: 'https://{a-d}.tiles.mapbox.com/v3/aj.sf-dem/{z}/{x}/{y}.png',\n  }),\n  style: {\n    variables: variables,\n    color: ['color', scaled, scaled, scaled],\n  },\n});\n\nconst controlIds = ['vert', 'sunEl', 'sunAz'];\ncontrolIds.forEach(function (id) {\n  const control = document.getElementById(id);\n  const output = document.getElementById(id + 'Out');\n  function updateValues() {\n    output.innerText = control.value;\n    variables[id] = Number(control.value);\n  }\n  updateValues();\n  const listener = function () {\n    updateValues();\n    shadedRelief.updateStyleVariables(variables);\n  };\n  control.addEventListener('input', listener);\n  control.addEventListener('change', listener);\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    shadedRelief,\n  ],\n  view: new View({\n    extent: [-13675026, 4439648, -13580856, 4580292],\n    center: [-13615645, 4497969],\n    minZoom: 10,\n    maxZoom: 16,\n    zoom: 13,\n  }),\n});\n"],"names":["variables","elevation","xOffset","yOffset","dp","z0x","dzdx","z0y","dzdy","slope","aspect","Math","PI","sunEl","scaled","shadedRelief","TileLayer","opacity","source","XYZ","url","style","color","forEach","id","control","document","getElementById","output","updateValues","innerText","value","Number","listener","updateStyleVariables","addEventListener","Map","target","layers","OSM","view","View","extent","center","minZoom","maxZoom","zoom"],"sourceRoot":""}