{"version":3,"file":"measure-style.js","mappings":"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","sources":["webpack:///./measure-style.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  RegularShape,\n  Stroke,\n  Style,\n  Text,\n} from '../src/ol/style.js';\nimport {Draw, Modify} from '../src/ol/interaction.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\n\nconst typeSelect = document.getElementById('type');\nconst showSegments = document.getElementById('segments');\nconst clearPrevious = document.getElementById('clear');\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: 'rgba(0, 0, 0, 0.5)',\n    lineDash: [10, 10],\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 5,\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)',\n    }),\n  }),\n});\n\nconst labelStyle = new Style({\n  text: new Text({\n    font: '14px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    padding: [3, 3, 3, 3],\n    textBaseline: 'bottom',\n    offsetY: -15,\n  }),\n  image: new RegularShape({\n    radius: 8,\n    points: 3,\n    angle: Math.PI,\n    displacement: [0, 10],\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n  }),\n});\n\nconst tipStyle = new Style({\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n    padding: [2, 2, 2, 2],\n    textAlign: 'left',\n    offsetX: 15,\n  }),\n});\n\nconst modifyStyle = new Style({\n  image: new CircleStyle({\n    radius: 5,\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n  }),\n  text: new Text({\n    text: 'Drag to modify',\n    font: '12px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    padding: [2, 2, 2, 2],\n    textAlign: 'left',\n    offsetX: 15,\n  }),\n});\n\nconst segmentStyle = new Style({\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n    padding: [2, 2, 2, 2],\n    textBaseline: 'bottom',\n    offsetY: -12,\n  }),\n  image: new RegularShape({\n    radius: 6,\n    points: 3,\n    angle: Math.PI,\n    displacement: [0, 8],\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n  }),\n});\n\nconst segmentStyles = [segmentStyle];\n\nconst formatLength = function (line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = Math.round((length / 1000) * 100) / 100 + ' km';\n  } else {\n    output = Math.round(length * 100) / 100 + ' m';\n  }\n  return output;\n};\n\nconst formatArea = function (polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = Math.round((area / 1000000) * 100) / 100 + ' km\\xB2';\n  } else {\n    output = Math.round(area * 100) / 100 + ' m\\xB2';\n  }\n  return output;\n};\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst modify = new Modify({source: source, style: modifyStyle});\n\nlet tipPoint;\n\nfunction styleFunction(feature, segments, drawType, tip) {\n  const styles = [style];\n  const geometry = feature.getGeometry();\n  const type = geometry.getType();\n  let point, label, line;\n  if (!drawType || drawType === type) {\n    if (type === 'Polygon') {\n      point = geometry.getInteriorPoint();\n      label = formatArea(geometry);\n      line = new LineString(geometry.getCoordinates()[0]);\n    } else if (type === 'LineString') {\n      point = new Point(geometry.getLastCoordinate());\n      label = formatLength(geometry);\n      line = geometry;\n    }\n  }\n  if (segments && line) {\n    let count = 0;\n    line.forEachSegment(function (a, b) {\n      const segment = new LineString([a, b]);\n      const label = formatLength(segment);\n      if (segmentStyles.length - 1 < count) {\n        segmentStyles.push(segmentStyle.clone());\n      }\n      const segmentPoint = new Point(segment.getCoordinateAt(0.5));\n      segmentStyles[count].setGeometry(segmentPoint);\n      segmentStyles[count].getText().setText(label);\n      styles.push(segmentStyles[count]);\n      count++;\n    });\n  }\n  if (label) {\n    labelStyle.setGeometry(point);\n    labelStyle.getText().setText(label);\n    styles.push(labelStyle);\n  }\n  if (\n    tip &&\n    type === 'Point' &&\n    !modify.getOverlay().getSource().getFeatures().length\n  ) {\n    tipPoint = geometry;\n    tipStyle.getText().setText(tip);\n    styles.push(tipStyle);\n  }\n  return styles;\n}\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    return styleFunction(feature, showSegments.checked);\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15,\n  }),\n});\n\nmap.addInteraction(modify);\n\nlet draw; // global so we can remove it later\n\nfunction addInteraction() {\n  const drawType = typeSelect.value;\n  const activeTip =\n    'Click to continue drawing the ' +\n    (drawType === 'Polygon' ? 'polygon' : 'line');\n  const idleTip = 'Click to start measuring';\n  let tip = idleTip;\n  draw = new Draw({\n    source: source,\n    type: drawType,\n    style: function (feature) {\n      return styleFunction(feature, showSegments.checked, drawType, tip);\n    },\n  });\n  draw.on('drawstart', function () {\n    if (clearPrevious.checked) {\n      source.clear();\n    }\n    modify.setActive(false);\n    tip = activeTip;\n  });\n  draw.on('drawend', function () {\n    modifyStyle.setGeometry(tipPoint);\n    modify.setActive(true);\n    map.once('pointermove', function () {\n      modifyStyle.setGeometry();\n    });\n    tip = idleTip;\n  });\n  modify.setActive(true);\n  map.addInteraction(draw);\n}\n\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n\nshowSegments.onchange = function () {\n  vector.changed();\n  draw.getOverlay().changed();\n};\n"],"names":["tipPoint","typeSelect","document","getElementById","showSegments","clearPrevious","style","Style","fill","Fill","color","stroke","Stroke","lineDash","width","image","CircleStyle","radius","labelStyle","text","Text","font","backgroundFill","padding","textBaseline","offsetY","RegularShape","points","angle","Math","PI","displacement","tipStyle","textAlign","offsetX","modifyStyle","segmentStyle","segmentStyles","formatLength","line","length","getLength","round","raster","TileLayer","source","OSM","VectorSource","modify","Modify","styleFunction","feature","segments","drawType","tip","point","label","polygon","area","styles","geometry","getGeometry","type","getType","getInteriorPoint","getArea","LineString","getCoordinates","Point","getLastCoordinate","count","forEachSegment","a","b","segment","push","clone","segmentPoint","getCoordinateAt","setGeometry","getText","setText","getOverlay","getSource","getFeatures","draw","vector","VectorLayer","checked","map","Map","layers","target","view","View","center","zoom","addInteraction","value","activeTip","idleTip","Draw","on","clear","setActive","once","onchange","removeInteraction","changed"],"sourceRoot":""}