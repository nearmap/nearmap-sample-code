{"version":3,"file":"cluster.js","mappings":"0FAqBA,I,wJANMA,EAAgBC,SAASC,eAAe,YACxCC,EAAmBF,SAASC,eAAe,gBAG3CE,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAAG,CAC9B,IAAMC,EAAc,CAAC,EAAIF,EAAIG,KAAKC,SAAWJ,EAAG,EAAIA,EAAIG,KAAKC,SAAWJ,GACxEF,EAASG,GAAK,IAAII,EAAAA,EAAQ,IAAIC,EAAAA,EAAMJ,IAGtC,IAAMK,EAAS,IAAIC,EAAAA,EAAa,CAC9BV,SAAUA,IAGNW,EAAgB,IAAIC,EAAAA,EAAQ,CAChCC,SAAUC,SAASlB,EAAcmB,MAAO,IACxCC,YAAaF,SAASf,EAAiBgB,MAAO,IAC9CN,OAAQA,IAGJQ,EAAa,GACbC,EAAW,IAAIC,EAAAA,EAAY,CAC/BV,OAAQE,EACRS,MAAO,SAAUC,GACf,IAAMC,EAAOD,EAAQE,IAAI,YAAYC,OACjCJ,EAAQH,EAAWK,GAqBvB,OApBKF,IACHA,EAAQ,IAAIK,EAAAA,GAAM,CAChBC,MAAO,IAAIC,EAAAA,EAAY,CACrBC,OAAQ,GACRC,OAAQ,IAAIC,EAAAA,EAAO,CACjBC,MAAO,SAETC,KAAM,IAAIC,EAAAA,EAAK,CACbF,MAAO,cAGXG,KAAM,IAAIC,EAAAA,EAAK,CACbD,KAAMZ,EAAKc,WACXJ,KAAM,IAAIC,EAAAA,EAAK,CACbF,MAAO,aAIbd,EAAWK,GAAQF,GAEdA,KAILiB,EAAS,IAAIC,EAAAA,EAAU,CAC3B7B,OAAQ,IAAI8B,EAAAA,IAGRC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CAACL,EAAQnB,GACjByB,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAkB,WACtBrC,EAAcsC,YAAYnC,SAASlB,EAAcmB,MAAO,MAE1DnB,EAAcsD,iBAAiB,QAASF,GACxCpD,EAAcsD,iBAAiB,SAAUF,GAEzC,IAAMG,EAAqB,WACzBxC,EAAcyC,eAAetC,SAASf,EAAiBgB,MAAO,MAEhEhB,EAAiBmD,iBAAiB,QAASC,GAC3CpD,EAAiBmD,iBAAiB,SAAUC,GAE5CX,EAAIa,GAAG,SAAS,SAACnD,GACfgB,EAASoC,YAAYpD,EAAEqD,OAAOC,MAAK,SAACC,GAClC,GAAIA,EAAgBjC,OAAQ,CAE1B,IAAMxB,EAAWyD,EAAgB,GAAGlC,IAAI,YACxC,GAAIvB,EAASwB,OAAS,EAAG,CACvB,IAAMkC,GAASC,EAAAA,EAAAA,IACb3D,EAASwC,KAAI,SAACoB,GAAD,OAAOA,EAAEC,cAAcC,qBAEtCtB,EAAIuB,UAAUC,IAAIN,EAAQ,CAACO,SAAU,IAAMC,QAAS,CAAC,GAAI,GAAI,GAAI,gB","sources":["webpack:///./cluster.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport Point from '../src/ol/geom/Point.js';\nimport View from '../src/ol/View.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from '../src/ol/style.js';\nimport {Cluster, OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {boundingExtent} from '../src/ol/extent.js';\n\nconst distanceInput = document.getElementById('distance');\nconst minDistanceInput = document.getElementById('min-distance');\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 4500000;\nfor (let i = 0; i < count; ++i) {\n  const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];\n  features[i] = new Feature(new Point(coordinates));\n}\n\nconst source = new VectorSource({\n  features: features,\n});\n\nconst clusterSource = new Cluster({\n  distance: parseInt(distanceInput.value, 10),\n  minDistance: parseInt(minDistanceInput.value, 10),\n  source: source,\n});\n\nconst styleCache = {};\nconst clusters = new VectorLayer({\n  source: clusterSource,\n  style: function (feature) {\n    const size = feature.get('features').length;\n    let style = styleCache[size];\n    if (!style) {\n      style = new Style({\n        image: new CircleStyle({\n          radius: 10,\n          stroke: new Stroke({\n            color: '#fff',\n          }),\n          fill: new Fill({\n            color: '#3399CC',\n          }),\n        }),\n        text: new Text({\n          text: size.toString(),\n          fill: new Fill({\n            color: '#fff',\n          }),\n        }),\n      });\n      styleCache[size] = style;\n    }\n    return style;\n  },\n});\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst map = new Map({\n  layers: [raster, clusters],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst distanceHandler = function () {\n  clusterSource.setDistance(parseInt(distanceInput.value, 10));\n};\ndistanceInput.addEventListener('input', distanceHandler);\ndistanceInput.addEventListener('change', distanceHandler);\n\nconst minDistanceHandler = function () {\n  clusterSource.setMinDistance(parseInt(minDistanceInput.value, 10));\n};\nminDistanceInput.addEventListener('input', minDistanceHandler);\nminDistanceInput.addEventListener('change', minDistanceHandler);\n\nmap.on('click', (e) => {\n  clusters.getFeatures(e.pixel).then((clickedFeatures) => {\n    if (clickedFeatures.length) {\n      // Get clustered Coordinates\n      const features = clickedFeatures[0].get('features');\n      if (features.length > 1) {\n        const extent = boundingExtent(\n          features.map((r) => r.getGeometry().getCoordinates())\n        );\n        map.getView().fit(extent, {duration: 1000, padding: [50, 50, 50, 50]});\n      }\n    }\n  });\n});\n"],"names":["distanceInput","document","getElementById","minDistanceInput","features","Array","e","i","coordinates","Math","random","Feature","Point","source","VectorSource","clusterSource","Cluster","distance","parseInt","value","minDistance","styleCache","clusters","VectorLayer","style","feature","size","get","length","Style","image","CircleStyle","radius","stroke","Stroke","color","fill","Fill","text","Text","toString","raster","TileLayer","OSM","map","Map","layers","target","view","View","center","zoom","distanceHandler","setDistance","addEventListener","minDistanceHandler","setMinDistance","on","getFeatures","pixel","then","clickedFeatures","extent","boundingExtent","r","getGeometry","getCoordinates","getView","fit","duration","padding"],"sourceRoot":""}