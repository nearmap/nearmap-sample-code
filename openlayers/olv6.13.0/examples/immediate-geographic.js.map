{"version":3,"file":"immediate-geographic.js","mappings":"mMASAA,E,QAAAA,MA6BA,IA3BA,IAAMC,EAAQ,IAAIC,EAAAA,EAAU,CAC1BC,OAAQ,IAAIC,EAAAA,EAAO,CACjBH,MAAO,YAILI,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CAACN,GACTO,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAQ,IAAIC,EAAAA,EAAO,CACvBC,OAAQ,EACRC,KAAM,IAAIC,EAAAA,EAAK,CAACC,MAAO,uBAGnBC,EAAQ,IAAIC,EAAAA,GAAM,CACtBP,MAAOA,IAGHQ,EAAI,IACJC,EAAa,IAAIC,MAAMF,GAEpBG,EAAI,EAAGA,EAAIH,IAAKG,EAAG,CAC1B,IAAMC,EAAM,IAAMC,KAAKC,SAAW,IAC5BC,EAAM,IAAMF,KAAKC,SAAW,GAClCL,EAAWE,GAAK,IAAIK,EAAAA,EAAM,CAACJ,EAAKG,IAGlC3B,EAAM6B,GAAG,cAAc,SAAUC,GAG/B,IAFA,IAAMC,GAAgBC,EAAAA,EAAAA,IAAiBF,GAE9BP,EAAI,EAAGA,EAAIH,IAAKG,EAAG,CAC1B,IAAMU,GAAaC,EAAAA,EAAAA,IAAUT,KAAKU,KAAKf,EAAIG,GAAKH,EAAG,MAC/Ca,EAAa,KAGjBrB,EAAMwB,WAAWH,GACjBrB,EAAMyB,SAASJ,GACfF,EAAcO,SAASpB,GACvBa,EAAcQ,aAAalB,EAAWE,KAGxC,IAAMC,EAAM,IAAMC,KAAKC,SAAW,IAC5BC,EAAM,IAAMF,KAAKC,SAAW,GAClCL,EAAWmB,KAAK,IAAIZ,EAAAA,EAAM,CAACJ,EAAKG,KAChCN,EAAWoB,QACXrC,EAAIsC,c","sources":["webpack:///./immediate-geographic.js"],"sourcesContent":["import Stamen from '../src/ol/source/Stamen.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {Circle, Fill, Style} from '../src/ol/style.js';\nimport {Map, View} from '../src/ol/index.js';\nimport {Point} from '../src/ol/geom.js';\nimport {getVectorContext} from '../src/ol/render.js';\nimport {upAndDown} from '../src/ol/easing.js';\nimport {useGeographic} from '../src/ol/proj.js';\n\nuseGeographic();\n\nconst layer = new TileLayer({\n  source: new Stamen({\n    layer: 'toner',\n  }),\n});\n\nconst map = new Map({\n  layers: [layer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst image = new Circle({\n  radius: 8,\n  fill: new Fill({color: 'rgb(255, 153, 0)'}),\n});\n\nconst style = new Style({\n  image: image,\n});\n\nconst n = 1000;\nconst geometries = new Array(n);\n\nfor (let i = 0; i < n; ++i) {\n  const lon = 360 * Math.random() - 180;\n  const lat = 180 * Math.random() - 90;\n  geometries[i] = new Point([lon, lat]);\n}\n\nlayer.on('postrender', function (event) {\n  const vectorContext = getVectorContext(event);\n\n  for (let i = 0; i < n; ++i) {\n    const importance = upAndDown(Math.pow((n - i) / n, 0.15));\n    if (importance < 0.1) {\n      continue;\n    }\n    image.setOpacity(importance);\n    image.setScale(importance);\n    vectorContext.setStyle(style);\n    vectorContext.drawGeometry(geometries[i]);\n  }\n\n  const lon = 360 * Math.random() - 180;\n  const lat = 180 * Math.random() - 90;\n  geometries.push(new Point([lon, lat]));\n  geometries.shift();\n  map.render();\n});\n"],"names":["useGeographic","layer","TileLayer","source","Stamen","map","Map","layers","target","view","View","center","zoom","image","Circle","radius","fill","Fill","color","style","Style","n","geometries","Array","i","lon","Math","random","lat","Point","on","event","vectorContext","getVectorContext","importance","upAndDown","pow","setOpacity","setScale","setStyle","drawGeometry","push","shift","render"],"sourceRoot":""}