{"version":3,"file":"jsts.js","mappings":"mPAiBMA,EAAS,IAAIC,EAAAA,EACnBC,MAAM,oCACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACd,IACMC,GADS,IAAIC,EAAAA,GACKC,aAAaH,EAAM,CACzCI,kBAAmB,cAGfC,EAAS,IAAIC,KAAKC,GAAGC,UAC3BH,EAAOI,OACLC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GAGF,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAASiB,OAAQD,IAAK,CACxC,IAAME,EAAUlB,EAASgB,GAKnBG,EAHWf,EAAOgB,KAAKF,EAAQG,eAGXC,OAAO,IAGjCJ,EAAQK,YAAYnB,EAAOoB,MAAML,IAGnCzB,EAAO+B,YAAYzB,MAEvB,IAAM0B,EAAc,IAAIC,EAAAA,EAAY,CAClCjC,OAAQA,IAGJkC,EAAc,IAAIC,EAAAA,EAAU,CAChCnC,OAAQ,IAAIoC,EAAAA,IAGF,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CAACJ,EAAaF,GACtBO,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAAA,GAAK,CACbC,QAAQC,EAAAA,EAAAA,IAAW,CAAC,WAAY,YAChCC,KAAM,S","sources":["webpack:///./jsts.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport LinearRing from '../src/ol/geom/LinearRing.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from '../src/ol/geom.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\nconst source = new VectorSource();\nfetch('data/geojson/roads-seoul.geojson')\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const format = new GeoJSON();\n    const features = format.readFeatures(json, {\n      featureProjection: 'EPSG:3857',\n    });\n\n    const parser = new jsts.io.OL3Parser();\n    parser.inject(\n      Point,\n      LineString,\n      LinearRing,\n      Polygon,\n      MultiPoint,\n      MultiLineString,\n      MultiPolygon\n    );\n\n    for (let i = 0; i < features.length; i++) {\n      const feature = features[i];\n      // convert the OpenLayers geometry to a JSTS geometry\n      const jstsGeom = parser.read(feature.getGeometry());\n\n      // create a buffer of 40 meters around each line\n      const buffered = jstsGeom.buffer(40);\n\n      // convert back from JSTS and replace the geometry on the feature\n      feature.setGeometry(parser.write(buffered));\n    }\n\n    source.addFeatures(features);\n  });\nconst vectorLayer = new VectorLayer({\n  source: source,\n});\n\nconst rasterLayer = new TileLayer({\n  source: new OSM(),\n});\n\nconst map = new Map({\n  layers: [rasterLayer, vectorLayer],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([126.979293, 37.528787]),\n    zoom: 15,\n  }),\n});\n"],"names":["source","VectorSource","fetch","then","response","json","features","GeoJSON","readFeatures","featureProjection","parser","jsts","io","OL3Parser","inject","Point","LineString","LinearRing","Polygon","MultiPoint","MultiLineString","MultiPolygon","i","length","feature","buffered","read","getGeometry","buffer","setGeometry","write","addFeatures","vectorLayer","VectorLayer","rasterLayer","TileLayer","OSM","Map","layers","target","document","getElementById","view","View","center","fromLonLat","zoom"],"sourceRoot":""}