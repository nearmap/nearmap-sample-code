{"version":3,"file":"chaikin.js","mappings":"6EAAA,IAAIA,EAAOC,EAAQ,MAEnBC,EAAOC,QAAU,SAASC,EAAOC,GACxBC,MAAMC,QAAQF,KACfA,EAAS,IAETD,EAAMI,OAAO,GACbH,EAAOI,KAAKT,EAAK,CAAC,EAAG,GAAII,EAAM,KACnC,IAAK,IAAIM,EAAE,EAAGA,EAAEN,EAAMI,OAAO,EAAGE,IAAK,CACjC,IAAIC,EAAKP,EAAMM,GACXE,EAAKR,EAAMM,EAAE,GACbG,EAAMF,EAAG,GACTG,EAAMH,EAAG,GACTI,EAAMH,EAAG,GACTI,EAAMJ,EAAG,GAETK,EAAI,CAAE,IAAOJ,EAAM,IAAOE,EAAK,IAAOD,EAAM,IAAOE,GACnDE,EAAI,CAAE,IAAOL,EAAM,IAAOE,EAAK,IAAOD,EAAM,IAAOE,GACvDX,EAAOI,KAAKQ,GACZZ,EAAOI,KAAKS,GAIhB,OAFId,EAAMI,OAAS,GACfH,EAAOI,KAAKT,EAAK,CAAC,EAAG,GAAII,EAAOA,EAAMI,OAAO,KAC1CH,I,iBCvBXH,EAAOC,QAAU,SAAkBgB,EAAKC,GAGpC,OAFAD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACJD,I,sHCcX,IAAME,EAAe,IAAIC,EAAAA,EAAa,IAEhCC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAAA,EAAU,CACZC,OAAQ,IAAIC,EAAAA,EACZC,QAAS,KAEX,IAAIC,EAAAA,EAAY,CACdH,OAAQN,KAGZU,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,YAAa,aACtBC,KAAM,MAIJC,EAAgBC,SAASC,eAAe,kBACxCC,EAAgBF,SAASC,eAAe,cAExCE,EAAO,IAAIC,EAAAA,GAAK,CACpBd,OAAQN,EACRqB,KAAM,eAERnB,EAAIoB,eAAeH,GACnBA,EAAKI,GAAG,WAAW,SAAUC,GAC3B,GAAKT,EAAcU,QAAnB,CAGA,IACMC,EADOF,EAAMG,QACGC,cAEhBC,EA3CR,SAAoBC,EAAMZ,GAExB,IADAA,EAAgBa,KAAKC,IAAID,KAAKE,IAAIf,EAAe,GAAI,IAC9CA,EAAgB,GACrBY,EAAOI,EAAOJ,GACdZ,IAEF,OAAOY,EAqCYK,CADJT,EAASU,iBACcC,SAASnB,EAAcoB,MAAO,KAAO,GAC3EZ,EAASa,eAAeV,S","sources":["webpack:///../node_modules/chaikin-smooth/index.js","webpack:///../node_modules/vec2-copy/index.js","webpack:///./chaikin.js"],"sourcesContent":["var copy = require('vec2-copy')\n\nmodule.exports = function(input, output) {\n    if (!Array.isArray(output))\n        output = []\n\n    if (input.length>0)\n        output.push(copy([0, 0], input[0]))\n    for (var i=0; i<input.length-1; i++) {\n        var p0 = input[i]\n        var p1 = input[i+1]\n        var p0x = p0[0],\n            p0y = p0[1],\n            p1x = p1[0],\n            p1y = p1[1]\n\n        var Q = [ 0.75 * p0x + 0.25 * p1x, 0.75 * p0y + 0.25 * p1y ]\n        var R = [ 0.25 * p0x + 0.75 * p1x, 0.25 * p0y + 0.75 * p1y ]\n        output.push(Q)\n        output.push(R)\n    }\n    if (input.length > 1)\n        output.push(copy([0, 0], input[ input.length-1 ]))\n    return output\n}","module.exports = function vec2Copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}","import Draw from '../src/ol/interaction/Draw.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\n\nimport smooth from 'chaikin-smooth';\n\nfunction makeSmooth(path, numIterations) {\n  numIterations = Math.min(Math.max(numIterations, 1), 10);\n  while (numIterations > 0) {\n    path = smooth(path);\n    numIterations--;\n  }\n  return path;\n}\n\nconst vectorSource = new VectorSource({});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n      opacity: 0.5,\n    }),\n    new VectorLayer({\n      source: vectorSource,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [1078373.595, 6871994.591],\n    zoom: 5,\n  }),\n});\n\nconst shallSmoothen = document.getElementById('shall-smoothen');\nconst numIterations = document.getElementById('iterations');\n\nconst draw = new Draw({\n  source: vectorSource,\n  type: 'LineString',\n});\nmap.addInteraction(draw);\ndraw.on('drawend', function (event) {\n  if (!shallSmoothen.checked) {\n    return;\n  }\n  const feat = event.feature;\n  const geometry = feat.getGeometry();\n  const coords = geometry.getCoordinates();\n  const smoothened = makeSmooth(coords, parseInt(numIterations.value, 10) || 5);\n  geometry.setCoordinates(smoothened);\n});\n"],"names":["copy","require","module","exports","input","output","Array","isArray","length","push","i","p0","p1","p0x","p0y","p1x","p1y","Q","R","out","a","vectorSource","VectorSource","map","Map","layers","TileLayer","source","OSM","opacity","VectorLayer","target","view","View","center","zoom","shallSmoothen","document","getElementById","numIterations","draw","Draw","type","addInteraction","on","event","checked","geometry","feature","getGeometry","smoothened","path","Math","min","max","smooth","makeSmooth","getCoordinates","parseInt","value","setCoordinates"],"sourceRoot":""}