{"version":3,"file":"getfeatureinfo-layers.js","mappings":"w8CAkBA,IAmJA,EApIMA,SAAAA,I,4SAIJ,WAAYC,GAAa,O,4FAAA,SAGvB,IAAMC,EAAUD,GAA4B,GAHrB,OACvB,gBAQKE,WAAa,yCAMlB,EAAKC,WAAa,IAAIC,EAAAA,EAMtB,EAAKC,QAAUJ,EAAQK,OAASL,EAAQK,OAAS,KArB1B,E,sCA2BzB,WACE,OAAOC,KAAKF,U,uBAMd,SAAUC,GACRC,KAAKF,QAAUC,I,2BASjB,SAAcE,EAAMC,GAClBD,EAAKE,aAAa,eAAgBH,KAAKL,YACvC,IAAMS,EAAYH,EAAKG,UAEnBC,EAAW,GACf,GAA+B,IAA3BJ,EAAKK,WAAWC,OAClB,OAAOF,EAET,GAAiB,eAAbD,EACF,IAAK,IAAII,EAAI,EAAGC,EAAKR,EAAKK,WAAWC,OAAQC,EAAIC,EAAID,IAAK,CACxD,IAAME,EAAQT,EAAKK,WAAWE,GAC9B,GAAIE,EAAMC,WAAaC,KAAKC,aAA5B,CAIA,IAAMC,EAAuCJ,EACvCK,EAAUb,EAAY,GAGtBc,EAAYF,EAAaV,UAAUa,QA5EzB,SA4E2C,IAE3D,IAAIjB,KAAKF,UAAYoB,EAAAA,EAAAA,IAASlB,KAAKF,QAASkB,GAA5C,CAIA,IAAMG,EAAcH,EAxFF,WA0FlBD,EAAO,YAAkBI,EACzBJ,EAAO,UAAgBf,KAAKL,WAG5B,IAAMyB,EAAU,GAChBA,EAAQD,IAAeE,EAAAA,EAAAA,IACrBrB,KAAKJ,WAAW0B,mBAChBtB,KAAKJ,YAEP,IAAM2B,GAAYC,EAAAA,EAAAA,IAChB,CAACT,EAAO,UAAe,MACvBK,GAEFN,EAAaX,aAAa,eAAgBH,KAAKL,YAC/C,IAAM8B,GAAgBC,EAAAA,EAAAA,GACpB,GAEAH,EACAT,EACAZ,EACAF,KAAKJ,YAEH6B,IACFE,EAAAA,EAAAA,IAAOtB,EAAUoB,KAIvB,GAAiB,qBAAbrB,EAAkC,CACpC,IAAMwB,GAAcF,EAAAA,EAAAA,GAClB,GACA1B,KAAKJ,WAAWiC,2BAChB5B,EACA,CAAC,IACDD,KAAKJ,YAEHgC,IACFvB,EAAWuB,GAGf,OAAOvB,I,kCAST,SAAqBJ,EAAMR,GACzB,IAAMC,EAAU,GAIhB,OAHID,IACFqC,EAAAA,EAAAA,IAAOpC,EAASM,KAAK+B,eAAe9B,EAAMR,IAErCO,KAAKgC,cAAc/B,EAAM,CAACP,S,gFAhI/BF,CAA0ByC,EAAAA,GC/BhCC,MAAM,mDACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUC,GAEd,IAAME,GAAc,IAAI9C,GAAoB+C,aAAaH,GACzDI,SAASC,eAAe,OAAOC,UAAYJ,EAAY/B,OAAOoC,WAI9D,IAAMC,EAAgB,IAAIpD,EAAkB,CAC1CO,OAAQ,CAAC,WACRwC,aAAaH,GAChBI,SAASC,eAAe,SAASC,UAC/BE,EAAcrC,OAAOoC,WAEvB,IAAME,EAAqB,IAAIrD,EAAkB,CAC/CO,OAAQ,CAAC,gBACRwC,aAAaH,GAChBI,SAASC,eAAe,cAAcC,UACpCG,EAAmBtC,OAAOoC,gB","sources":["webpack:///../src/ol/format/WMSGetFeatureInfo.js","webpack:///./getfeatureinfo-layers.js"],"sourcesContent":["/**\n * @module ol/format/WMSGetFeatureInfo\n */\nimport GML2 from './GML2.js';\nimport XMLFeature from './XMLFeature.js';\nimport {assign} from '../obj.js';\nimport {extend, includes} from '../array.js';\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n/**\n * @const\n * @type {string}\n */\nconst featureIdentifier = '_feature';\n\n/**\n * @const\n * @type {string}\n */\nconst layerIdentifier = '_layer';\n\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @api\n */\nclass WMSGetFeatureInfo extends XMLFeature {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n\n    /**\n     * @private\n     * @type {GML2}\n     */\n    this.gmlFormat_ = new GML2();\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n  }\n\n  /**\n   * @return {Array<string>|null} layers\n   */\n  getLayers() {\n    return this.layers_;\n  }\n\n  /**\n   * @param {Array<string>|null} layers Layers to parse.\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n  readFeatures_(node, objectStack) {\n    node.setAttribute('namespaceURI', this.featureNS_);\n    const localName = node.localName;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = [];\n    if (node.childNodes.length === 0) {\n      return features;\n    }\n    if (localName == 'msGMLOutput') {\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\n        const layer = node.childNodes[i];\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n\n        const layerElement = /** @type {Element} */ (layer);\n        const context = objectStack[0];\n\n        const toRemove = layerIdentifier;\n        const layerName = layerElement.localName.replace(toRemove, '');\n\n        if (this.layers_ && !includes(this.layers_, layerName)) {\n          continue;\n        }\n\n        const featureType = layerName + featureIdentifier;\n\n        context['featureType'] = featureType;\n        context['featureNS'] = this.featureNS_;\n\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        parsers[featureType] = makeArrayPusher(\n          this.gmlFormat_.readFeatureElement,\n          this.gmlFormat_\n        );\n        const parsersNS = makeStructureNS(\n          [context['featureNS'], null],\n          parsers\n        );\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\n        const layerFeatures = pushParseAndPop(\n          [],\n          // @ts-ignore\n          parsersNS,\n          layerElement,\n          objectStack,\n          this.gmlFormat_\n        );\n        if (layerFeatures) {\n          extend(features, layerFeatures);\n        }\n      }\n    }\n    if (localName == 'FeatureCollection') {\n      const gmlFeatures = pushParseAndPop(\n        [],\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS,\n        node,\n        [{}],\n        this.gmlFormat_\n      );\n      if (gmlFeatures) {\n        features = gmlFeatures;\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    const options = {};\n    if (opt_options) {\n      assign(options, this.getReadOptions(node, opt_options));\n    }\n    return this.readFeatures_(node, [options]);\n  }\n}\n\nexport default WMSGetFeatureInfo;\n","import WMSGetFeatureInfo from '../src/ol/format/WMSGetFeatureInfo.js';\n\nfetch('data/wmsgetfeatureinfo/osm-restaurant-hotel.xml')\n  .then(function (response) {\n    return response.text();\n  })\n  .then(function (response) {\n    // this is the standard way to read the features\n    const allFeatures = new WMSGetFeatureInfo().readFeatures(response);\n    document.getElementById('all').innerText = allFeatures.length.toString();\n\n    // when specifying the 'layers' options, only the features of those\n    // layers are returned by the format\n    const hotelFeatures = new WMSGetFeatureInfo({\n      layers: ['hotel'],\n    }).readFeatures(response);\n    document.getElementById('hotel').innerText =\n      hotelFeatures.length.toString();\n\n    const restaurantFeatures = new WMSGetFeatureInfo({\n      layers: ['restaurant'],\n    }).readFeatures(response);\n    document.getElementById('restaurant').innerText =\n      restaurantFeatures.length.toString();\n  });\n"],"names":["WMSGetFeatureInfo","opt_options","options","featureNS_","gmlFormat_","GML2","layers_","layers","this","node","objectStack","setAttribute","localName","features","childNodes","length","i","ii","layer","nodeType","Node","ELEMENT_NODE","layerElement","context","layerName","replace","includes","featureType","parsers","makeArrayPusher","readFeatureElement","parsersNS","makeStructureNS","layerFeatures","pushParseAndPop","extend","gmlFeatures","FEATURE_COLLECTION_PARSERS","assign","getReadOptions","readFeatures_","XMLFeature","fetch","then","response","text","allFeatures","readFeatures","document","getElementById","innerText","toString","hotelFeatures","restaurantFeatures"],"sourceRoot":""}