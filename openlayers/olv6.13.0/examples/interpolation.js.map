{"version":3,"file":"interpolation.js","mappings":"sIAKMA,EAAM,oCACNC,EACJ,4LAGIC,EAAkB,IAAIC,EAAAA,EAAU,CAEpCC,UAAW,eACXC,OAAQ,IAAIC,EAAAA,EAAI,CACdL,aAAcA,EACdM,IACE,kEAAoEP,EACtEQ,SAAU,IACVC,QAAS,GACTC,YAAa,GACbC,aAAa,MAIXC,EAAe,IAAIT,EAAAA,EAAU,CACjCE,OAAQ,IAAIC,EAAAA,EAAI,CACdL,aAAcA,EACdM,IACE,kEAAoEP,EACtEQ,SAAU,IACVC,QAAS,GACTC,YAAa,OAIXG,EAAO,IAAIC,EAAAA,GAAK,CACpBC,OAAQ,CAAC,MAAO,SAChBC,KAAM,GACNC,WAAY,cAGRC,EAAO,IAAIC,EAAAA,EAAI,CACnBC,OAAQ,OACRC,OAAQ,CAACnB,GACTW,KAAMA,IAGFS,EAAO,IAAIH,EAAAA,EAAI,CACnBC,OAAQ,OACRC,OAAQ,CAACT,GACTC,KAAMA,IAGFU,EAAQC,SAASC,eAAe,SAChCC,EAAQF,SAASC,eAAe,SAEhCE,EAAiB,SAAUC,GAC3BA,EAAIC,WAGRX,EAAKY,oBACHF,EAAIG,OACJ,SAAUC,EAAOD,GACf,IAAME,EAC0D,IAAzC,IAAXF,EAAM,GAAW,IAAiB,IAAXA,EAAM,GAAWA,EAAM,IAAvD,IACHR,EAAMW,UAAYD,EAAOE,QAAQ,KAEnC,CACEC,YAAa,SAAUJ,GACrB,OAAOA,IAAU9B,KAIvBoB,EAAKQ,oBACHF,EAAIG,OACJ,SAAUC,EAAOD,GACf,IAAME,EAC0D,IAAzC,IAAXF,EAAM,GAAW,IAAiB,IAAXA,EAAM,GAAWA,EAAM,IAAvD,IACHL,EAAMQ,UAAYD,EAAOE,QAAQ,KAEnC,CACEC,YAAa,SAAUJ,GACrB,OAAOA,IAAUpB,OAMzBM,EAAKmB,GAAG,cAAeV,GACvBL,EAAKe,GAAG,cAAeV,K","sources":["webpack:///./interpolation.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst notInterpolated = new TileLayer({\n  // specify className so forEachLayerAtPixel can distinguish layers\n  className: 'ol-layer-dem',\n  source: new XYZ({\n    attributions: attributions,\n    url:\n      'https://api.maptiler.com/tiles/terrain-rgb/{z}/{x}/{y}.png?key=' + key,\n    tileSize: 512,\n    maxZoom: 12,\n    crossOrigin: '',\n    interpolate: false,\n  }),\n});\n\nconst interpolated = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url:\n      'https://api.maptiler.com/tiles/terrain-rgb/{z}/{x}/{y}.png?key=' + key,\n    tileSize: 512,\n    maxZoom: 12,\n    crossOrigin: '',\n  }),\n});\n\nconst view = new View({\n  center: [6.893, 45.8295],\n  zoom: 16,\n  projection: 'EPSG:4326',\n});\n\nconst map1 = new Map({\n  target: 'map1',\n  layers: [notInterpolated],\n  view: view,\n});\n\nconst map2 = new Map({\n  target: 'map2',\n  layers: [interpolated],\n  view: view,\n});\n\nconst info1 = document.getElementById('info1');\nconst info2 = document.getElementById('info2');\n\nconst showElevations = function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  map1.forEachLayerAtPixel(\n    evt.pixel,\n    function (layer, pixel) {\n      const height =\n        -10000 + (pixel[0] * 256 * 256 + pixel[1] * 256 + pixel[2]) * 0.1;\n      info1.innerText = height.toFixed(1);\n    },\n    {\n      layerFilter: function (layer) {\n        return layer === notInterpolated;\n      },\n    }\n  );\n  map2.forEachLayerAtPixel(\n    evt.pixel,\n    function (layer, pixel) {\n      const height =\n        -10000 + (pixel[0] * 256 * 256 + pixel[1] * 256 + pixel[2]) * 0.1;\n      info2.innerText = height.toFixed(1);\n    },\n    {\n      layerFilter: function (layer) {\n        return layer === interpolated;\n      },\n    }\n  );\n};\n\nmap1.on('pointermove', showElevations);\nmap2.on('pointermove', showElevations);\n"],"names":["key","attributions","notInterpolated","TileLayer","className","source","XYZ","url","tileSize","maxZoom","crossOrigin","interpolate","interpolated","view","View","center","zoom","projection","map1","Map","target","layers","map2","info1","document","getElementById","info2","showElevations","evt","dragging","forEachLayerAtPixel","pixel","layer","height","innerText","toFixed","layerFilter","on"],"sourceRoot":""}