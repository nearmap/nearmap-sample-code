{"version":3,"file":"layer-spy.js","mappings":"0JAOMA,EAAM,oCACNC,EACJ,4LAGIC,EAAQ,IAAIC,EAAAA,EAAU,CAC1BC,OAAQ,IAAIC,EAAAA,EAAI,CACdJ,aAAcA,EACdK,IAAK,6DAA+DN,EACpEO,SAAU,IACVC,QAAS,OAIPC,EAAU,IAAIN,EAAAA,EAAU,CAC5BC,OAAQ,IAAIC,EAAAA,EAAI,CACdJ,aAAcA,EACdK,IAAK,gEAAkEN,EACvEQ,QAAS,OAIPE,EAAYC,SAASC,eAAe,OAEpCC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CAACb,EAAOO,GAChBO,OAAQN,EACRO,KAAM,IAAIC,EAAAA,GAAK,CACbC,QAAQC,EAAAA,EAAAA,IAAW,EAAE,IAAK,OAC1BC,KAAM,MAINC,EAAS,GACbX,SAASY,iBAAiB,WAAW,SAAUC,GAC3B,KAAdA,EAAIC,OACNH,EAASI,KAAKC,IAAIL,EAAS,EAAG,KAC9BT,EAAIe,SACJJ,EAAIK,kBACmB,KAAdL,EAAIC,QACbH,EAASI,KAAKI,IAAIR,EAAS,EAAG,IAC9BT,EAAIe,SACJJ,EAAIK,qBAKR,IAAIE,EAAgB,KAEpBrB,EAAUa,iBAAiB,aAAa,SAAUS,GAChDD,EAAgBlB,EAAIoB,cAAcD,GAClCnB,EAAIe,YAGNlB,EAAUa,iBAAiB,YAAY,WACrCQ,EAAgB,KAChBlB,EAAIe,YAINnB,EAAQyB,GAAG,aAAa,SAAUF,GAChC,IAAMG,EAAMH,EAAMI,QAGlB,GAFAD,EAAIE,OACJF,EAAIG,YACAP,EAAe,CAEjB,IAAMQ,GAAQC,EAAAA,EAAAA,IAAeR,EAAOD,GAC9BU,GAASD,EAAAA,EAAAA,IAAeR,EAAO,CACnCD,EAAc,GAAKT,EACnBS,EAAc,KAEVW,EAAehB,KAAKiB,KACxBjB,KAAKkB,IAAIH,EAAO,GAAKF,EAAM,GAAI,GAAKb,KAAKkB,IAAIH,EAAO,GAAKF,EAAM,GAAI,IAErEJ,EAAIU,IAAIN,EAAM,GAAIA,EAAM,GAAIG,EAAc,EAAG,EAAIhB,KAAKoB,IACtDX,EAAIY,UAAa,EAAIL,EAAgBpB,EACrCa,EAAIa,YAAc,kBAClBb,EAAIc,SAENd,EAAIe,UAINzC,EAAQyB,GAAG,cAAc,SAAUF,GACrBA,EAAMI,QACde,e","sources":["webpack:///./layer-spy.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {getRenderPixel} from '../src/ol/render.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst roads = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/maps/streets/{z}/{x}/{y}.png?key=' + key,\n    tileSize: 512,\n    maxZoom: 22,\n  }),\n});\n\nconst imagery = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nconst container = document.getElementById('map');\n\nconst map = new Map({\n  layers: [roads, imagery],\n  target: container,\n  view: new View({\n    center: fromLonLat([-109, 46.5]),\n    zoom: 6,\n  }),\n});\n\nlet radius = 75;\ndocument.addEventListener('keydown', function (evt) {\n  if (evt.which === 38) {\n    radius = Math.min(radius + 5, 150);\n    map.render();\n    evt.preventDefault();\n  } else if (evt.which === 40) {\n    radius = Math.max(radius - 5, 25);\n    map.render();\n    evt.preventDefault();\n  }\n});\n\n// get the pixel position with every move\nlet mousePosition = null;\n\ncontainer.addEventListener('mousemove', function (event) {\n  mousePosition = map.getEventPixel(event);\n  map.render();\n});\n\ncontainer.addEventListener('mouseout', function () {\n  mousePosition = null;\n  map.render();\n});\n\n// before rendering the layer, do some clipping\nimagery.on('prerender', function (event) {\n  const ctx = event.context;\n  ctx.save();\n  ctx.beginPath();\n  if (mousePosition) {\n    // only show a circle around the mouse\n    const pixel = getRenderPixel(event, mousePosition);\n    const offset = getRenderPixel(event, [\n      mousePosition[0] + radius,\n      mousePosition[1],\n    ]);\n    const canvasRadius = Math.sqrt(\n      Math.pow(offset[0] - pixel[0], 2) + Math.pow(offset[1] - pixel[1], 2)\n    );\n    ctx.arc(pixel[0], pixel[1], canvasRadius, 0, 2 * Math.PI);\n    ctx.lineWidth = (5 * canvasRadius) / radius;\n    ctx.strokeStyle = 'rgba(0,0,0,0.5)';\n    ctx.stroke();\n  }\n  ctx.clip();\n});\n\n// after rendering the layer, restore the canvas context\nimagery.on('postrender', function (event) {\n  const ctx = event.context;\n  ctx.restore();\n});\n"],"names":["key","attributions","roads","TileLayer","source","XYZ","url","tileSize","maxZoom","imagery","container","document","getElementById","map","Map","layers","target","view","View","center","fromLonLat","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","mousePosition","event","getEventPixel","on","ctx","context","save","beginPath","pixel","getRenderPixel","offset","canvasRadius","sqrt","pow","arc","PI","lineWidth","strokeStyle","stroke","clip","restore"],"sourceRoot":""}