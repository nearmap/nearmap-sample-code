{"version":3,"file":"magnify.js","mappings":"0JAYMA,EAAU,IAAIC,EAAAA,EAAU,CAC5BC,OAAQ,IAAIC,EAAAA,EAAI,CACdC,aALF,4LAMEC,IAAK,iGACLC,QAAS,GACTC,YAAa,OAIXC,EAAYC,SAASC,eAAe,OAEpCC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CAACb,GACTc,OAAQN,EACRO,KAAM,IAAIC,EAAAA,GAAK,CACbC,QAAQC,EAAAA,EAAAA,IAAW,EAAE,IAAK,OAC1BC,KAAM,MAINC,EAAS,GACbX,SAASY,iBAAiB,WAAW,SAAUC,GAC3B,KAAdA,EAAIC,OACNH,EAASI,KAAKC,IAAIL,EAAS,EAAG,KAC9BT,EAAIe,SACJJ,EAAIK,kBACmB,KAAdL,EAAIC,QACbH,EAASI,KAAKI,IAAIR,EAAS,EAAG,IAC9BT,EAAIe,SACJJ,EAAIK,qBAKR,IAAIE,EAAgB,KAEpBrB,EAAUa,iBAAiB,aAAa,SAAUS,GAChDD,EAAgBlB,EAAIoB,cAAcD,GAClCnB,EAAIe,YAGNlB,EAAUa,iBAAiB,YAAY,WACrCQ,EAAgB,KAChBlB,EAAIe,YAIN1B,EAAQgC,GAAG,cAAc,SAAUF,GACjC,GAAID,EAAe,CAkBjB,IAjBA,IAAMI,GAAQC,EAAAA,EAAAA,IAAeJ,EAAOD,GAC9BM,GAASD,EAAAA,EAAAA,IAAeJ,EAAO,CACnCD,EAAc,GAAKT,EACnBS,EAAc,KAEVO,EAAOZ,KAAKa,KAChBb,KAAKc,IAAIH,EAAO,GAAKF,EAAM,GAAI,GAAKT,KAAKc,IAAIH,EAAO,GAAKF,EAAM,GAAI,IAE/DM,EAAUT,EAAMS,QAChBC,EAAUP,EAAM,GAChBQ,EAAUR,EAAM,GAChBS,EAAUF,EAAUJ,EACpBO,EAAUF,EAAUL,EACpBQ,EAAOpB,KAAKqB,MAAM,EAAIT,EAAO,GAC7BU,EAAaP,EAAQQ,aAAaL,EAASC,EAASC,EAAMA,GAAMI,KAChEC,EAAOV,EAAQW,gBAAgBN,EAAMA,GACrCO,EAAWF,EAAKD,KACbI,EAAI,EAAGA,EAAIR,IAAQQ,EAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIT,IAAQS,EAAG,CAC7B,IAAMC,EAAKD,EAAIjB,EACTmB,EAAKH,EAAIhB,EAEXoB,EAAUH,EACVI,EAAUL,EAFD5B,KAAKa,KAAKiB,EAAKA,EAAKC,EAAKA,GAG3BnB,IACToB,EAAUhC,KAAKqB,MAAMT,EAAOkB,EAAK,GACjCG,EAAUjC,KAAKqB,MAAMT,EAAOmB,EAAK,IAEnC,IAAMG,EAA8B,GAAhBN,EAAIR,EAAOS,GACzBM,EAA4C,GAA5BF,EAAUb,EAAOY,GACvCL,EAASO,GAAcZ,EAAWa,GAClCR,EAASO,EAAa,GAAKZ,EAAWa,EAAe,GACrDR,EAASO,EAAa,GAAKZ,EAAWa,EAAe,GACrDR,EAASO,EAAa,GAAKZ,EAAWa,EAAe,GAGzDpB,EAAQqB,YACRrB,EAAQsB,IAAIrB,EAASC,EAASL,EAAM,EAAG,EAAIZ,KAAKsC,IAChDvB,EAAQwB,UAAa,EAAI3B,EAAQhB,EACjCmB,EAAQyB,YAAc,wBACtBzB,EAAQ0B,aAAahB,EAAMP,EAASC,GACpCJ,EAAQ2B,SACR3B,EAAQ4B,gB","sources":["webpack:///./magnify.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {getRenderPixel} from '../src/ol/render.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst imagery = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n    crossOrigin: '',\n  }),\n});\n\nconst container = document.getElementById('map');\n\nconst map = new Map({\n  layers: [imagery],\n  target: container,\n  view: new View({\n    center: fromLonLat([-109, 46.5]),\n    zoom: 6,\n  }),\n});\n\nlet radius = 75;\ndocument.addEventListener('keydown', function (evt) {\n  if (evt.which === 38) {\n    radius = Math.min(radius + 5, 150);\n    map.render();\n    evt.preventDefault();\n  } else if (evt.which === 40) {\n    radius = Math.max(radius - 5, 25);\n    map.render();\n    evt.preventDefault();\n  }\n});\n\n// get the pixel position with every move\nlet mousePosition = null;\n\ncontainer.addEventListener('mousemove', function (event) {\n  mousePosition = map.getEventPixel(event);\n  map.render();\n});\n\ncontainer.addEventListener('mouseout', function () {\n  mousePosition = null;\n  map.render();\n});\n\n// after rendering the layer, show an oversampled version around the pointer\nimagery.on('postrender', function (event) {\n  if (mousePosition) {\n    const pixel = getRenderPixel(event, mousePosition);\n    const offset = getRenderPixel(event, [\n      mousePosition[0] + radius,\n      mousePosition[1],\n    ]);\n    const half = Math.sqrt(\n      Math.pow(offset[0] - pixel[0], 2) + Math.pow(offset[1] - pixel[1], 2)\n    );\n    const context = event.context;\n    const centerX = pixel[0];\n    const centerY = pixel[1];\n    const originX = centerX - half;\n    const originY = centerY - half;\n    const size = Math.round(2 * half + 1);\n    const sourceData = context.getImageData(originX, originY, size, size).data;\n    const dest = context.createImageData(size, size);\n    const destData = dest.data;\n    for (let j = 0; j < size; ++j) {\n      for (let i = 0; i < size; ++i) {\n        const dI = i - half;\n        const dJ = j - half;\n        const dist = Math.sqrt(dI * dI + dJ * dJ);\n        let sourceI = i;\n        let sourceJ = j;\n        if (dist < half) {\n          sourceI = Math.round(half + dI / 2);\n          sourceJ = Math.round(half + dJ / 2);\n        }\n        const destOffset = (j * size + i) * 4;\n        const sourceOffset = (sourceJ * size + sourceI) * 4;\n        destData[destOffset] = sourceData[sourceOffset];\n        destData[destOffset + 1] = sourceData[sourceOffset + 1];\n        destData[destOffset + 2] = sourceData[sourceOffset + 2];\n        destData[destOffset + 3] = sourceData[sourceOffset + 3];\n      }\n    }\n    context.beginPath();\n    context.arc(centerX, centerY, half, 0, 2 * Math.PI);\n    context.lineWidth = (3 * half) / radius;\n    context.strokeStyle = 'rgba(255,255,255,0.5)';\n    context.putImageData(dest, originX, originY);\n    context.stroke();\n    context.restore();\n  }\n});\n"],"names":["imagery","TileLayer","source","XYZ","attributions","url","maxZoom","crossOrigin","container","document","getElementById","map","Map","layers","target","view","View","center","fromLonLat","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","mousePosition","event","getEventPixel","on","pixel","getRenderPixel","offset","half","sqrt","pow","context","centerX","centerY","originX","originY","size","round","sourceData","getImageData","data","dest","createImageData","destData","j","i","dI","dJ","sourceI","sourceJ","destOffset","sourceOffset","beginPath","arc","PI","lineWidth","strokeStyle","putImageData","stroke","restore"],"sourceRoot":""}