{"version":3,"file":"vector-osm.js","mappings":"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","sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"sourcesContent":["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {makeStructureNS, pushParseAndPop} from '../xml.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @const\n * @type {Array<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'nd': readNd,\n  'tag': readTag,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'node': readNode,\n  'way': readWay,\n});\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nclass OSMXML extends XMLFeature {\n  constructor() {\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    const options = this.getReadOptions(node, opt_options);\n    if (node.localName == 'osm') {\n      const state = pushParseAndPop(\n        {\n          nodes: {},\n          ways: [],\n          features: [],\n        },\n        PARSERS,\n        node,\n        [options]\n      );\n      // parse nodes in ways\n      for (let j = 0; j < state.ways.length; j++) {\n        const values = /** @type {Object} */ (state.ways[j]);\n        /** @type {Array<number>} */\n        const flatCoordinates = [];\n        for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n          const point = state.nodes[values.ndrefs[i]];\n          extend(flatCoordinates, point);\n        }\n        let geometry;\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [\n            flatCoordinates.length,\n          ]);\n        } else {\n          geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n        }\n        transformGeometryWithOptions(geometry, false, options);\n        const feature = new Feature(geometry);\n        if (values.id !== undefined) {\n          feature.setId(values.id);\n        }\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n      }\n      if (state.features) {\n        return state.features;\n      }\n    }\n    return [];\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'tag': readTag,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat')),\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop(\n    {\n      tags: {},\n    },\n    NODE_PARSERS,\n    node,\n    objectStack\n  );\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformGeometryWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    if (id !== undefined) {\n      feature.setId(id);\n    }\n    feature.setProperties(values.tags, true);\n    state.features.push(feature);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop(\n    {\n      id: id,\n      ndrefs: [],\n      tags: {},\n    },\n    WAY_PARSERS,\n    node,\n    objectStack\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\nexport default OSMXML;\n","import Map from '../src/ol/Map.js';\nimport OSMXML from '../src/ol/format/OSMXML.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\nimport {transformExtent} from '../src/ol/proj.js';\n\nlet map = null;\n\nconst styles = {\n  'amenity': {\n    'parking': new Style({\n      stroke: new Stroke({\n        color: 'rgba(170, 170, 170, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(170, 170, 170, 0.3)',\n      }),\n    }),\n  },\n  'building': {\n    '.*': new Style({\n      zIndex: 100,\n      stroke: new Stroke({\n        color: 'rgba(246, 99, 79, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(246, 99, 79, 0.3)',\n      }),\n    }),\n  },\n  'highway': {\n    'service': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 2,\n      }),\n    }),\n    '.*': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 3,\n      }),\n    }),\n  },\n  'landuse': {\n    'forest|grass|allotments': new Style({\n      stroke: new Stroke({\n        color: 'rgba(140, 208, 95, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(140, 208, 95, 0.3)',\n      }),\n    }),\n  },\n  'natural': {\n    'tree': new Style({\n      image: new CircleStyle({\n        radius: 2,\n        fill: new Fill({\n          color: 'rgba(140, 208, 95, 1.0)',\n        }),\n        stroke: null,\n      }),\n    }),\n  },\n};\n\nconst vectorSource = new VectorSource({\n  format: new OSMXML(),\n  loader: function (extent, resolution, projection, success, failure) {\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n    const client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n    client.addEventListener('load', function () {\n      const features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: map.getView().getProjection(),\n      });\n      vectorSource.addFeatures(features);\n      success(features);\n    });\n    client.addEventListener('error', failure);\n    const query =\n      '(node(' +\n      epsg4326Extent[1] +\n      ',' +\n      Math.max(epsg4326Extent[0], -180) +\n      ',' +\n      epsg4326Extent[3] +\n      ',' +\n      Math.min(epsg4326Extent[2], 180) +\n      ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n  },\n  strategy: bboxStrategy,\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function (feature) {\n    for (const key in styles) {\n      const value = feature.get(key);\n      if (value !== undefined) {\n        for (const regexp in styles[key]) {\n          if (new RegExp(regexp).test(value)) {\n            return styles[key][regexp];\n          }\n        }\n      }\n    }\n    return null;\n  },\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nmap = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [739218, 5906096],\n    maxZoom: 19,\n    zoom: 17,\n  }),\n});\n"],"names":["NAMESPACE_URIS","WAY_PARSERS","makeStructureNS","node","objectStack","length","ndrefs","push","getAttribute","readTag","PARSERS","options","state","id","coordinates","parseFloat","nodes","values","pushParseAndPop","tags","NODE_PARSERS","isEmpty","geometry","Point","transformGeometryWithOptions","feature","Feature","undefined","setId","setProperties","features","ways","OSMXML","dataProjection","getProjection","opt_options","this","getReadOptions","localName","j","flatCoordinates","i","ii","point","extend","Polygon","GeometryLayout","LineString","XMLFeature","map","styles","Style","stroke","Stroke","color","width","fill","Fill","zIndex","image","CircleStyle","radius","vectorSource","VectorSource","format","loader","extent","resolution","projection","success","failure","epsg4326Extent","transformExtent","client","XMLHttpRequest","open","addEventListener","readFeatures","responseText","featureProjection","getView","addFeatures","query","Math","max","min","send","strategy","bboxStrategy","vector","VectorLayer","source","style","key","value","get","regexp","RegExp","test","raster","TileLayer","XYZ","attributions","url","maxZoom","Map","layers","target","document","getElementById","view","View","center","zoom"],"sourceRoot":""}