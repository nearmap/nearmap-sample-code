{"version":3,"file":"external-map.js","mappings":"0+CAsCIA,EA3BEC,EAAAA,SAAAA,I,4SACJ,aAAc,a,4FAAA,UACZ,cAAM,CACJC,QAASC,SAASC,cAAc,UAE7BF,QAAQG,aAAa,SAAU,UACpC,EAAKH,QAAQI,UAAY,UACzB,EAAKJ,QAAQK,UAAY,4BANb,E,8FADVN,CAAqBO,EAAAA,GAWrBC,EAAiBN,SAASO,eAAe,OAEzCC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQJ,EACRK,UAAUC,EAAAA,EAAAA,MAAkBC,OAAO,CAAC,IAAIC,EAAAA,EAAc,IAAIhB,IAC1DiB,OAAQ,CACN,IAAIC,EAAAA,EAAU,CACZC,OAAQ,IAAIC,EAAAA,KAGhBC,KAAM,IAAIC,EAAAA,GAAK,CACbC,QAAQC,EAAAA,EAAAA,IAAW,CAAC,MAAO,OAC3BC,KAAM,MAKV,SAASC,IACH3B,IACFA,EAAU4B,QACV5B,OAAY6B,GAIhBC,OAAOC,iBAAiB,WAAYJ,GAEpC,IAAMK,EAAS7B,SAASO,eAAe,uBAEvC,SAASuB,IACPxB,EAAeyB,MAAMC,OAAS,GAC9BxB,EAAIyB,UAAU3B,GACduB,EAAOK,UAAW,EAGpB,SAASC,IACP,GAAKtC,EAAL,CAGA,IAAMuC,EAAoBvC,EAAUG,SAASO,eAAe,OACvD6B,IAG4B,YAA7BpC,SAASqC,iBAEXD,EAAkBE,UAAUC,OAAO,YACnCH,EAAkBlC,aAAa,WAAY,KAC3CkC,EAAkBI,UAGlBJ,EAAkBK,gBAAgB,YAClCL,EAAkBE,UAAUI,IAAI,eAGpCf,OAAOC,iBAAiB,mBAAoBO,GAE5CN,EAAOD,iBAAiB,SAAS,WAC/B,IAAMe,EAAgB3C,SAASO,eAAe,kBAC9CoC,EAAczC,aAAa,SAAU,UACrC2B,EAAOK,UAAW,EAGlB,IAAIU,EAAaC,YAAW,WAC1BrB,IACAM,IACAa,EAAcF,gBAAgB,UAC9BG,OAAalB,IACZ,MAEH7B,EAAY8B,OAAOmB,KACjB,kCACA,YACA,wDAEQlB,iBAAiB,oBAAoB,WAC7C,IAAMQ,EAAoBvC,EAAUG,SAASO,eAAe,OAC5DD,EAAeyB,MAAMC,OAAS,MAC9BxB,EAAIyB,UAAUG,GAEVQ,IACFA,EAAaG,aAAaH,IAE5B/C,EAAU+B,iBAAiB,YAAY,WACrCE,IAEAN,OAGFW,Y","sources":["webpack:///./external-map.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {\n  Control,\n  FullScreen,\n  defaults as defaultControls,\n} from '../src/ol/control.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\nclass UnusableMask extends Control {\n  constructor() {\n    super({\n      element: document.createElement('div'),\n    });\n    this.element.setAttribute('hidden', 'hidden');\n    this.element.className = 'ol-mask';\n    this.element.innerHTML = '<div>Map not usable</div>';\n  }\n}\n\nconst localMapTarget = document.getElementById('map');\n\nconst map = new Map({\n  target: localMapTarget,\n  controls: defaultControls().extend([new FullScreen(), new UnusableMask()]),\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  view: new View({\n    center: fromLonLat([37.41, 8.82]),\n    zoom: 4,\n  }),\n});\n\nlet mapWindow;\nfunction closeMapWindow() {\n  if (mapWindow) {\n    mapWindow.close();\n    mapWindow = undefined;\n  }\n}\n// Close external window in case the main page is closed or reloaded\nwindow.addEventListener('pagehide', closeMapWindow);\n\nconst button = document.getElementById('external-map-button');\n\nfunction resetMapTarget() {\n  localMapTarget.style.height = '';\n  map.setTarget(localMapTarget);\n  button.disabled = false;\n}\n\nfunction updateOverlay() {\n  if (!mapWindow) {\n    return;\n  }\n  const externalMapTarget = mapWindow.document.getElementById('map');\n  if (!externalMapTarget) {\n    return;\n  }\n  if (document.visibilityState === 'visible') {\n    // Show controls and enable keyboard input\n    externalMapTarget.classList.remove('unusable');\n    externalMapTarget.setAttribute('tabindex', '0');\n    externalMapTarget.focus();\n  } else {\n    // Hide all controls and disable keyboard input\n    externalMapTarget.removeAttribute('tabindex');\n    externalMapTarget.classList.add('unusable');\n  }\n}\nwindow.addEventListener('visibilitychange', updateOverlay);\n\nbutton.addEventListener('click', function () {\n  const blockerNotice = document.getElementById('blocker-notice');\n  blockerNotice.setAttribute('hidden', 'hidden');\n  button.disabled = true;\n\n  // Reset button and map target in case window did not load or open\n  let timeoutKey = setTimeout(function () {\n    closeMapWindow();\n    resetMapTarget();\n    blockerNotice.removeAttribute('hidden');\n    timeoutKey = undefined;\n  }, 3000);\n\n  mapWindow = window.open(\n    'resources/external-map-map.html',\n    'MapWindow',\n    'toolbar=0,location=0,menubar=0,width=800,height=600'\n  );\n  mapWindow.addEventListener('DOMContentLoaded', function () {\n    const externalMapTarget = mapWindow.document.getElementById('map');\n    localMapTarget.style.height = '0px';\n    map.setTarget(externalMapTarget);\n\n    if (timeoutKey) {\n      timeoutKey = clearTimeout(timeoutKey);\n    }\n    mapWindow.addEventListener('pagehide', function () {\n      resetMapTarget();\n      // Close window in case user does a page reload\n      closeMapWindow();\n    });\n\n    updateOverlay();\n  });\n});\n"],"names":["mapWindow","UnusableMask","element","document","createElement","setAttribute","className","innerHTML","Control","localMapTarget","getElementById","map","Map","target","controls","defaultControls","extend","FullScreen","layers","TileLayer","source","OSM","view","View","center","fromLonLat","zoom","closeMapWindow","close","undefined","window","addEventListener","button","resetMapTarget","style","height","setTarget","disabled","updateOverlay","externalMapTarget","visibilityState","classList","remove","focus","removeAttribute","add","blockerNotice","timeoutKey","setTimeout","open","clearTimeout"],"sourceRoot":""}