{"version":3,"file":"reprojection-by-code.js","mappings":"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","sources":["webpack:///./reprojection-by-code.js"],"sourcesContent":["import Graticule from '../src/ol/layer/Graticule.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport TileDebug from '../src/ol/source/TileDebug.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport proj4 from 'proj4';\nimport {applyTransform} from '../src/ol/extent.js';\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\nimport {register} from '../src/ol/proj/proj4.js';\n\nconst osmSource = new OSM();\n\nconst debugLayer = new TileLayer({\n  source: new TileDebug({\n    tileGrid: osmSource.getTileGrid(),\n    projection: osmSource.getProjection(),\n  }),\n  visible: false,\n});\n\nconst graticule = new Graticule({\n  // the style to use for the lines, optional.\n  strokeStyle: new Stroke({\n    color: 'rgba(255,120,0,0.9)',\n    width: 2,\n    lineDash: [0.5, 4],\n  }),\n  showLabels: true,\n  visible: false,\n  wrapX: false,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: osmSource,\n    }),\n    debugLayer,\n    graticule,\n  ],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n\nconst queryInput = document.getElementById('epsg-query');\nconst searchButton = document.getElementById('epsg-search');\nconst resultSpan = document.getElementById('epsg-result');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\nconst showTilesCheckbox = document.getElementById('show-tiles');\nconst showGraticuleCheckbox = document.getElementById('show-graticule');\n\nfunction setProjection(code, name, proj4def, bbox) {\n  if (code === null || name === null || proj4def === null || bbox === null) {\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\n    map.setView(\n      new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 1,\n      })\n    );\n    return;\n  }\n\n  resultSpan.innerHTML = '(' + code + ') ' + name;\n\n  const newProjCode = 'EPSG:' + code;\n  proj4.defs(newProjCode, proj4def);\n  register(proj4);\n  const newProj = getProjection(newProjCode);\n  const fromLonLat = getTransform('EPSG:4326', newProj);\n\n  let worldExtent = [bbox[1], bbox[2], bbox[3], bbox[0]];\n  newProj.setWorldExtent(worldExtent);\n\n  // approximate calculation of projection extent,\n  // checking if the world extent crosses the dateline\n  if (bbox[1] > bbox[3]) {\n    worldExtent = [bbox[1], bbox[2], bbox[3] + 360, bbox[0]];\n  }\n  const extent = applyTransform(worldExtent, fromLonLat, undefined, 8);\n  newProj.setExtent(extent);\n  const newView = new View({\n    projection: newProj,\n  });\n  map.setView(newView);\n  newView.fit(extent);\n}\n\nfunction search(query) {\n  resultSpan.innerHTML = 'Searching ...';\n  fetch('https://epsg.io/?format=json&q=' + query)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      const results = json['results'];\n      if (results && results.length > 0) {\n        for (let i = 0, ii = results.length; i < ii; i++) {\n          const result = results[i];\n          if (result) {\n            const code = result['code'];\n            const name = result['name'];\n            const proj4def = result['proj4'];\n            const bbox = result['bbox'];\n            if (\n              code &&\n              code.length > 0 &&\n              proj4def &&\n              proj4def.length > 0 &&\n              bbox &&\n              bbox.length == 4\n            ) {\n              setProjection(code, name, proj4def, bbox);\n              return;\n            }\n          }\n        }\n      }\n      setProjection(null, null, null, null);\n    });\n}\n\n/**\n * Handle click event.\n * @param {Event} event The event.\n */\nsearchButton.onclick = function (event) {\n  search(queryInput.value);\n  event.preventDefault();\n};\n\n/**\n * Handle checkbox change events.\n */\nrenderEdgesCheckbox.onchange = function () {\n  osmSource.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\n};\nshowTilesCheckbox.onchange = function () {\n  debugLayer.setVisible(showTilesCheckbox.checked);\n};\nshowGraticuleCheckbox.onchange = function () {\n  graticule.setVisible(showGraticuleCheckbox.checked);\n};\n"],"names":["osmSource","OSM","debugLayer","TileLayer","source","TileDebug","tileGrid","getTileGrid","projection","getProjection","visible","graticule","Graticule","strokeStyle","Stroke","color","width","lineDash","showLabels","wrapX","map","Map","layers","target","view","View","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","showTilesCheckbox","showGraticuleCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","newProjCode","proj4","register","newProj","fromLonLat","getTransform","worldExtent","setWorldExtent","extent","applyTransform","undefined","setExtent","newView","fit","onclick","event","query","value","fetch","then","response","json","results","length","i","ii","result","preventDefault","onchange","setRenderReprojectionEdges","checked","setVisible"],"sourceRoot":""}