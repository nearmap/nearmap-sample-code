{"version":3,"file":"d3.js","mappings":"y+CAQMA,EAAAA,SAAAA,I,4SACJ,WAAYC,GAAS,a,4FAAA,UACnB,cAAMA,IAEDC,SAAWD,EAAQC,SAExB,EAAKC,IAAMC,GACRC,OAAOC,SAASC,cAAc,QAC9BC,OAAO,OACPC,MAAM,WAAY,YAErB,EAAKN,IAAIK,OAAO,QAAQE,MAAM,EAAKR,UAAUS,KAAK,QAAS,YAVxC,E,2CAarB,WACE,OAAOC,EAAAA,EAAAA,Q,oBAGT,SAAOC,GACL,IAAMC,EAAQD,EAAWE,KAAK,GACxBC,EAASH,EAAWE,KAAK,GACzBE,EAAaJ,EAAWK,UAAUD,WAClCE,EAAef,GAAGgB,cAAcC,MAAM,GAAGC,UAAU,CAAC,EAAG,IACzDC,EAASnB,GAAGoB,UAAUP,WAAWE,GAE/BM,EAAcF,EAAOG,OAAOC,KAAKzB,UACjC0B,EAAmBH,EAAY,GAAG,GAAKA,EAAY,GAAG,GACtDI,EAAoBJ,EAAY,GAAG,GAAKA,EAAY,GAAG,GAEvDK,EAAY1B,GAAG0B,UAAUH,KAAKzB,UAC9B6B,GAAsBC,EAAAA,EAAAA,IAAWF,EAAU,GAAIb,GAC/CgB,GAAoBD,EAAAA,EAAAA,IAAWF,EAAU,GAAIb,GAC/CiB,EAAiBD,EAAkB,GAAKF,EAAoB,GAC5DG,EAAiB,IACnBA,IAAkBC,EAAAA,EAAAA,IAASlB,EAAWmB,cAExC,IAEMC,EAAkBH,EAAiBN,EACnCU,GAHkBL,EAAkB,GAAKF,EAAoB,IAGxBF,EAErCR,EADIkB,KAAKC,IAAIH,EAAiBC,GAClBzB,EAAWK,UAAUuB,WAEjCC,GAASC,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,IAAU/B,EAAWgC,QAAS5B,GAChD6B,EAA0C,KAAhCjC,EAAWK,UAAU6B,SAAkBR,KAAKS,GAgB5D,OAdA7B,EACGE,MAAMA,GACNqB,OAAOA,GACPpB,UAAU,CAACR,EAAQ,EAAGE,EAAS,IAC/B8B,MAAMA,IAETvB,EAASA,EAAON,WAAWE,IACpBQ,KAAKzB,UAEZyB,KAAKxB,IAAIQ,KAAK,QAASG,GACvBa,KAAKxB,IAAIQ,KAAK,SAAUK,GAExBW,KAAKxB,IAAIE,OAAO,QAAQM,KAAK,IAAKY,GAE3BI,KAAKxB,IAAI8C,Y,gFA5DdjD,CAAoBkD,EAAAA,GAgEpBC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAAA,EAAU,CACZC,OAAQ,IAAIC,EAAAA,EAAO,CACjBC,MAAO,kBAIbC,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACblB,QAAQV,EAAAA,EAAAA,IAAW,EAAE,GAAI,KACzB6B,KAAM,MAOVzD,GAAG0D,KAAK,yBAAyBC,MAAK,SAAUC,GAC9C,IAAMP,EAAQ,IAAIzD,EAAY,CAC5BE,SAAU+D,SAASC,QAAQF,EAAIA,EAAGG,QAAQC,YAG5CjB,EAAIkB,SAASZ,Q","sources":["webpack:///./d3.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport SourceState from '../src/ol/source/State.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport View from '../src/ol/View.js';\nimport {Layer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {fromLonLat, toLonLat} from '../src/ol/proj.js';\nimport {getCenter, getWidth} from '../src/ol/extent.js';\n\nclass CanvasLayer extends Layer {\n  constructor(options) {\n    super(options);\n\n    this.features = options.features;\n\n    this.svg = d3\n      .select(document.createElement('div'))\n      .append('svg')\n      .style('position', 'absolute');\n\n    this.svg.append('path').datum(this.features).attr('class', 'boundary');\n  }\n\n  getSourceState() {\n    return SourceState.READY;\n  }\n\n  render(frameState) {\n    const width = frameState.size[0];\n    const height = frameState.size[1];\n    const projection = frameState.viewState.projection;\n    const d3Projection = d3.geoMercator().scale(1).translate([0, 0]);\n    let d3Path = d3.geoPath().projection(d3Projection);\n\n    const pixelBounds = d3Path.bounds(this.features);\n    const pixelBoundsWidth = pixelBounds[1][0] - pixelBounds[0][0];\n    const pixelBoundsHeight = pixelBounds[1][1] - pixelBounds[0][1];\n\n    const geoBounds = d3.geoBounds(this.features);\n    const geoBoundsLeftBottom = fromLonLat(geoBounds[0], projection);\n    const geoBoundsRightTop = fromLonLat(geoBounds[1], projection);\n    let geoBoundsWidth = geoBoundsRightTop[0] - geoBoundsLeftBottom[0];\n    if (geoBoundsWidth < 0) {\n      geoBoundsWidth += getWidth(projection.getExtent());\n    }\n    const geoBoundsHeight = geoBoundsRightTop[1] - geoBoundsLeftBottom[1];\n\n    const widthResolution = geoBoundsWidth / pixelBoundsWidth;\n    const heightResolution = geoBoundsHeight / pixelBoundsHeight;\n    const r = Math.max(widthResolution, heightResolution);\n    const scale = r / frameState.viewState.resolution;\n\n    const center = toLonLat(getCenter(frameState.extent), projection);\n    const angle = (-frameState.viewState.rotation * 180) / Math.PI;\n\n    d3Projection\n      .scale(scale)\n      .center(center)\n      .translate([width / 2, height / 2])\n      .angle(angle);\n\n    d3Path = d3Path.projection(d3Projection);\n    d3Path(this.features);\n\n    this.svg.attr('width', width);\n    this.svg.attr('height', height);\n\n    this.svg.select('path').attr('d', d3Path);\n\n    return this.svg.node();\n  }\n}\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new Stamen({\n        layer: 'watercolor',\n      }),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-97, 38]),\n    zoom: 4,\n  }),\n});\n\n/**\n * Load the topojson data and create an ol/layer/Image for that data.\n */\nd3.json('data/topojson/us.json').then(function (us) {\n  const layer = new CanvasLayer({\n    features: topojson.feature(us, us.objects.counties),\n  });\n\n  map.addLayer(layer);\n});\n"],"names":["CanvasLayer","options","features","svg","d3","select","document","createElement","append","style","datum","attr","SourceState","frameState","width","size","height","projection","viewState","d3Projection","geoMercator","scale","translate","d3Path","geoPath","pixelBounds","bounds","this","pixelBoundsWidth","pixelBoundsHeight","geoBounds","geoBoundsLeftBottom","fromLonLat","geoBoundsRightTop","geoBoundsWidth","getWidth","getExtent","widthResolution","heightResolution","Math","max","resolution","center","toLonLat","getCenter","extent","angle","rotation","PI","node","Layer","map","Map","layers","TileLayer","source","Stamen","layer","target","view","View","zoom","json","then","us","topojson","feature","objects","counties","addLayer"],"sourceRoot":""}