{"version":3,"file":"numpytile.js","mappings":"+IAsCA,IAAMA,EAAkB,SAACC,GAAD,MAAa,CACnC,cACA,CAAC,UACD,CAAC,OAAQA,GACT,CAAC,MAAO,QACR,EACA,CAAC,MAAO,QACR,IAGIC,EAAa,IACbC,EAAa,KAEbC,EAAa,IAAIC,EAAAA,EAAU,CAC/BC,MAAO,CACLC,MAAO,CACL,QACAP,EAAgB,GAChBA,EAAgB,GAChBA,EAAgB,GAChB,CAAC,OAAQ,IAEXQ,UAAW,CACT,KAAQN,EACR,KAAQC,IAGZM,OAAQ,IAAIC,EAAAA,EAAe,CACzBC,OAvDJ,SAAyBC,EAAGC,EAAGC,GAC7B,IAAMC,EAAM,mDAAH,OAAsDH,EAAtD,YAA2DC,EAA3D,YAAgEC,EAAhE,8BAAuFE,mBAHhG,4FAOA,OAAOC,MAAMF,GACVG,MAAK,SAACC,GAAD,OAAOA,EAAEC,iBACdF,MAAK,SAACG,GAAD,OAAYC,YAAYC,gBAAgBF,MAC7CH,MAAK,SAACM,GAIL,IAFA,IAAMC,EAAW,IAAIC,aAAa,QAC5BC,EAAW,MACRd,EAAI,EAAGA,EAAI,IAAKA,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAMc,EAAKf,EAAQ,IAAJC,EACfW,EAAc,EAALG,EAAS,GAAKJ,EAAUK,KAAS,IAAJf,EAAUD,GAChDY,EAAc,EAALG,EAAS,GAAKJ,EAAUK,KAAKF,EAAe,IAAJb,EAAUD,GAC3DY,EAAc,EAALG,EAAS,GAAKJ,EAAUK,KAAKF,OAAmB,IAAJb,EAAUD,GAC/DY,EAAc,EAALG,EAAS,GAAKJ,EAAUK,KAAKF,OAAmB,IAAJb,EAAUD,GAC/DY,EAAc,EAALG,EAAS,GAChBJ,EAAUK,KAAKF,OAAmB,IAAJb,EAAUD,GAAK,EAAI,EAAM,EAG7D,OAAOY,MAiCTK,UAAW,MAaTC,GATM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,MACRC,OAAQ,CAAC9B,GACT+B,KAAM,IAAIC,EAAAA,GAAK,CACbC,QAAQC,EAAAA,EAAAA,IAAW,CAAC,QAAS,SAC7BC,KAAM,OAIOC,SAASC,eAAe,cACnCC,EAAWF,SAASC,eAAe,aACnCE,EAAYH,SAASC,eAAe,cACpCG,EAAYJ,SAASC,eAAe,cAEpCI,EAAY,SAACC,GACjB1C,EAAW2C,qBAAqB,CAC9B,KAAQC,WAAWF,EAAIb,OAAOgB,OAC9B,KAAQD,WAAWN,EAASO,SAE9BN,EAAUO,UAAYJ,EAAIb,OAAOgB,OAEnClB,EAASoB,iBAAiB,QAASN,GACnCd,EAASoB,iBAAiB,SAAUN,GAEpC,IAAMO,EAAY,SAACN,GACjB1C,EAAW2C,qBAAqB,CAC9B,KAAQC,WAAWjB,EAASkB,OAC5B,KAAQD,WAAWF,EAAIb,OAAOgB,SAEhCL,EAAUM,UAAYJ,EAAIb,OAAOgB,OAEnCP,EAASS,iBAAiB,QAASC,GACnCV,EAASS,iBAAiB,SAAUC,GAEpCrB,EAASkB,MAAQ/C,EACjBwC,EAASO,MAAQ9C,EACjBwC,EAAUO,UAAYhD,EACtB0C,EAAUM,UAAY/C,I","sources":["webpack:///./numpytile.js"],"sourcesContent":["import DataTileSource from '../src/ol/source/DataTile.js';\nimport Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\nimport View from '../src/ol/View.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\n// 16-bit COG\n// Which will be served as NumpyTiles.\nconst COG =\n  'https://storage.googleapis.com/open-cogs/stac-examples/20201211_223832_CS2_analytic.tif';\n\nfunction numpyTileLoader(z, x, y) {\n  const url = `https://api.cogeo.xyz/cog/tiles/WebMercatorQuad/${z}/${x}/${y}@1x?format=npy&url=${encodeURIComponent(\n    COG\n  )}`;\n\n  return fetch(url)\n    .then((r) => r.arrayBuffer())\n    .then((buffer) => NumpyLoader.fromArrayBuffer(buffer))\n    .then((numpyData) => {\n      // flatten the numpy data\n      const dataTile = new Float32Array(256 * 256 * 5);\n      const bandSize = 256 * 256;\n      for (let x = 0; x < 256; x++) {\n        for (let y = 0; y < 256; y++) {\n          const px = x + y * 256;\n          dataTile[px * 5 + 0] = numpyData.data[y * 256 + x];\n          dataTile[px * 5 + 1] = numpyData.data[bandSize + y * 256 + x];\n          dataTile[px * 5 + 2] = numpyData.data[bandSize * 2 + y * 256 + x];\n          dataTile[px * 5 + 3] = numpyData.data[bandSize * 3 + y * 256 + x];\n          dataTile[px * 5 + 4] =\n            numpyData.data[bandSize * 4 + y * 256 + x] > 0 ? 1.0 : 0;\n        }\n      }\n      return dataTile;\n    });\n}\n\nconst interpolateBand = (bandIdx) => [\n  'interpolate',\n  ['linear'],\n  ['band', bandIdx],\n  ['var', 'bMin'],\n  0,\n  ['var', 'bMax'],\n  1,\n];\n\nconst initialMin = 3000;\nconst initialMax = 18000;\n\nconst numpyLayer = new TileLayer({\n  style: {\n    color: [\n      'array',\n      interpolateBand(3),\n      interpolateBand(2),\n      interpolateBand(1),\n      ['band', 5],\n    ],\n    variables: {\n      'bMin': initialMin,\n      'bMax': initialMax,\n    },\n  },\n  source: new DataTileSource({\n    loader: numpyTileLoader,\n    bandCount: 5,\n  }),\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [numpyLayer],\n  view: new View({\n    center: fromLonLat([172.933, 1.3567]),\n    zoom: 15,\n  }),\n});\n\nconst inputMin = document.getElementById('input-min');\nconst inputMax = document.getElementById('input-max');\nconst outputMin = document.getElementById('output-min');\nconst outputMax = document.getElementById('output-max');\n\nconst handleMin = (evt) => {\n  numpyLayer.updateStyleVariables({\n    'bMin': parseFloat(evt.target.value),\n    'bMax': parseFloat(inputMax.value),\n  });\n  outputMin.innerText = evt.target.value;\n};\ninputMin.addEventListener('input', handleMin);\ninputMin.addEventListener('change', handleMin);\n\nconst handleMax = (evt) => {\n  numpyLayer.updateStyleVariables({\n    'bMin': parseFloat(inputMin.value),\n    'bMax': parseFloat(evt.target.value),\n  });\n  outputMax.innerText = evt.target.value;\n};\ninputMax.addEventListener('input', handleMax);\ninputMax.addEventListener('change', handleMax);\n\ninputMin.value = initialMin;\ninputMax.value = initialMax;\noutputMin.innerText = initialMin;\noutputMax.innerText = initialMax;\n"],"names":["interpolateBand","bandIdx","initialMin","initialMax","numpyLayer","TileLayer","style","color","variables","source","DataTileSource","loader","z","x","y","url","encodeURIComponent","fetch","then","r","arrayBuffer","buffer","NumpyLoader","fromArrayBuffer","numpyData","dataTile","Float32Array","bandSize","px","data","bandCount","inputMin","Map","target","layers","view","View","center","fromLonLat","zoom","document","getElementById","inputMax","outputMin","outputMax","handleMin","evt","updateStyleVariables","parseFloat","value","innerText","addEventListener","handleMax"],"sourceRoot":""}