{"version":3,"file":"iiif.js","mappings":"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","sources":["webpack:///../src/ol/format/IIIFInfo.js","webpack:///../src/ol/source/IIIF.js","webpack:///./iiif.js"],"sourcesContent":["/**\n * @module ol/format/IIIFInfo\n */\n\nimport {assert} from '../asserts.js';\nimport {includes} from '../array.js';\n\n/**\n * @typedef {Object} PreferredOptions\n * @property {string} [format] Preferred image format. Will be used if the image information\n * indicates support for that format.\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\n * indicates support for that quality.\n */\n\n/**\n * @typedef {Object} SupportedFeatures\n * @property {Array<string>} [supports] Supported IIIF image size and region\n * calculation features.\n * @property {Array<string>} [formats] Supported image formats.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n */\n\n/**\n * @typedef {Object} TileInfo\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\n * @property {number} width Tile width in pixels.\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\n * not given.\n */\n\n/**\n * @typedef {Object} IiifProfile\n * @property {Array<string>} [formats] Supported image formats for the image service.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n * @property {Array<string>} [supports] Supported features.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n */\n\n/**\n * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}\n *    ImageInformationResponse\n */\n\n/**\n * Enum representing the major IIIF Image API versions\n * @enum {string}\n */\nexport const Versions = {\n  VERSION1: 'version1',\n  VERSION2: 'version2',\n  VERSION3: 'version3',\n};\n\n/**\n * Supported image formats, qualities and supported region / size calculation features\n * for different image API versions and compliance levels\n * @const\n * @type {Object<string, Object<string, SupportedFeatures>>}\n */\nconst IIIF_PROFILE_VALUES = {};\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\n  'level0': {\n    supports: [],\n    formats: [],\n    qualities: ['native'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['native'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['native', 'color', 'grey', 'bitonal'],\n  },\n};\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByDistortedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['default', 'bitonal'],\n  },\n};\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionSquare',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['default'],\n  },\n};\nIIIF_PROFILE_VALUES['none'] = {\n  'none': {\n    supports: [],\n    formats: [],\n    qualities: [],\n  },\n};\n\nconst COMPLIANCE_VERSION1 =\n  /^https?:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(?:1\\.1\\/)?compliance\\.html#level[0-2]$/;\nconst COMPLIANCE_VERSION2 =\n  /^https?:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](?:\\.json)?$/;\nconst COMPLIANCE_VERSION3 =\n  /(^https?:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](?:\\.json)?$)|(^level[0-2]$)/;\n\nfunction generateVersion1Options(iiifInfo) {\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\n  // Version 1.0 and 1.1 do not require a profile.\n  if (levelProfile === undefined) {\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\n  }\n  return {\n    url:\n      iiifInfo.imageInfo['@id'] === undefined\n        ? undefined\n        : iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\n    supports: levelProfile.supports,\n    formats: [\n      ...levelProfile.formats,\n      iiifInfo.imageInfo.formats === undefined\n        ? []\n        : iiifInfo.imageInfo.formats,\n    ],\n    qualities: [\n      ...levelProfile.qualities,\n      iiifInfo.imageInfo.qualities === undefined\n        ? []\n        : iiifInfo.imageInfo.qualities,\n    ],\n    resolutions: iiifInfo.imageInfo.scale_factors,\n    tileSize:\n      iiifInfo.imageInfo.tile_width !== undefined\n        ? iiifInfo.imageInfo.tile_height !== undefined\n          ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]\n          : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]\n        : iiifInfo.imageInfo.tile_height != undefined\n        ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]\n        : undefined,\n  };\n}\n\nfunction generateVersion2Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n    additionalProfile =\n      Array.isArray(iiifInfo.imageInfo.profile) &&\n      iiifInfo.imageInfo.profile.length > 1,\n    profileSupports =\n      additionalProfile && iiifInfo.imageInfo.profile[1].supports\n        ? iiifInfo.imageInfo.profile[1].supports\n        : [],\n    profileFormats =\n      additionalProfile && iiifInfo.imageInfo.profile[1].formats\n        ? iiifInfo.imageInfo.profile[1].formats\n        : [],\n    profileQualities =\n      additionalProfile && iiifInfo.imageInfo.profile[1].qualities\n        ? iiifInfo.imageInfo.profile[1].qualities\n        : [];\n  return {\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\n    sizes:\n      iiifInfo.imageInfo.sizes === undefined\n        ? undefined\n        : iiifInfo.imageInfo.sizes.map(function (size) {\n            return [size.width, size.height];\n          }),\n    tileSize:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : [\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.width;\n            })[0],\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.height === undefined ? tile.width : tile.height;\n            })[0],\n          ],\n    resolutions:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\n            return tile.scaleFactors;\n          })[0],\n    supports: [...levelProfile.supports, ...profileSupports],\n    formats: [...levelProfile.formats, ...profileFormats],\n    qualities: [...levelProfile.qualities, ...profileQualities],\n  };\n}\n\nfunction generateVersion3Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n    formats =\n      iiifInfo.imageInfo.extraFormats === undefined\n        ? levelProfile.formats\n        : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\n    preferredFormat =\n      iiifInfo.imageInfo.preferredFormats !== undefined &&\n      Array.isArray(iiifInfo.imageInfo.preferredFormats) &&\n      iiifInfo.imageInfo.preferredFormats.length > 0\n        ? iiifInfo.imageInfo.preferredFormats\n            .filter(function (format) {\n              return includes(['jpg', 'png', 'gif'], format);\n            })\n            .reduce(function (acc, format) {\n              return acc === undefined && includes(formats, format)\n                ? format\n                : acc;\n            }, undefined)\n        : undefined;\n  return {\n    url: iiifInfo.imageInfo['id'],\n    sizes:\n      iiifInfo.imageInfo.sizes === undefined\n        ? undefined\n        : iiifInfo.imageInfo.sizes.map(function (size) {\n            return [size.width, size.height];\n          }),\n    tileSize:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : [\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.width;\n            })[0],\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.height;\n            })[0],\n          ],\n    resolutions:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\n            return tile.scaleFactors;\n          })[0],\n    supports:\n      iiifInfo.imageInfo.extraFeatures === undefined\n        ? levelProfile.supports\n        : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\n    formats: formats,\n    qualities:\n      iiifInfo.imageInfo.extraQualities === undefined\n        ? levelProfile.qualities\n        : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],\n    preferredFormat: preferredFormat,\n  };\n}\n\nconst versionFunctions = {};\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\n\n/**\n * @classdesc\n * Format for transforming IIIF Image API image information responses into\n * IIIF tile source ready options\n *\n * @api\n */\nclass IIIFInfo {\n  /**\n   * @param {string|ImageInformationResponse} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   */\n  constructor(imageInfo) {\n    this.setImageInfo(imageInfo);\n  }\n\n  /**\n   * @param {string|ImageInformationResponse} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   * @api\n   */\n  setImageInfo(imageInfo) {\n    if (typeof imageInfo == 'string') {\n      this.imageInfo = JSON.parse(imageInfo);\n    } else {\n      this.imageInfo = imageInfo;\n    }\n  }\n\n  /**\n   * @return {Versions} Major IIIF version.\n   * @api\n   */\n  getImageApiVersion() {\n    if (this.imageInfo === undefined) {\n      return;\n    }\n    let context = this.imageInfo['@context'] || 'ol-no-context';\n    if (typeof context == 'string') {\n      context = [context];\n    }\n    for (let i = 0; i < context.length; i++) {\n      switch (context[i]) {\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\n        case 'http://iiif.io/api/image/1/context.json':\n          return Versions.VERSION1;\n        case 'http://iiif.io/api/image/2/context.json':\n          return Versions.VERSION2;\n        case 'http://iiif.io/api/image/3/context.json':\n          return Versions.VERSION3;\n        case 'ol-no-context':\n          // Image API 1.0 has no '@context'\n          if (\n            this.getComplianceLevelEntryFromProfile(Versions.VERSION1) &&\n            this.imageInfo.identifier\n          ) {\n            return Versions.VERSION1;\n          }\n          break;\n        default:\n      }\n    }\n    assert(false, 61);\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @return {string} Compliance level as it appears in the IIIF image information\n   * response.\n   */\n  getComplianceLevelEntryFromProfile(version) {\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\n      return;\n    }\n    if (version === undefined) {\n      version = this.getImageApiVersion();\n    }\n    switch (version) {\n      case Versions.VERSION1:\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION3:\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION2:\n        if (\n          typeof this.imageInfo.profile === 'string' &&\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile)\n        ) {\n          return this.imageInfo.profile;\n        }\n        if (\n          Array.isArray(this.imageInfo.profile) &&\n          this.imageInfo.profile.length > 0 &&\n          typeof this.imageInfo.profile[0] === 'string' &&\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])\n        ) {\n          return this.imageInfo.profile[0];\n        }\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @return {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\n   */\n  getComplianceLevelFromProfile(version) {\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\n    if (complianceLevel === undefined) {\n      return undefined;\n    }\n    const level = complianceLevel.match(/level[0-2](?:\\.json)?$/g);\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\n  }\n\n  /**\n   * @return {SupportedFeatures} Image formats, qualities and region / size calculation\n   * methods that are supported by the IIIF service.\n   */\n  getComplianceLevelSupportedFeatures() {\n    if (this.imageInfo === undefined) {\n      return;\n    }\n    const version = this.getImageApiVersion();\n    const level = this.getComplianceLevelFromProfile(version);\n    if (level === undefined) {\n      return IIIF_PROFILE_VALUES['none']['none'];\n    }\n    return IIIF_PROFILE_VALUES[version][level];\n  }\n\n  /**\n   * @param {PreferredOptions} [opt_preferredOptions] Optional options for preferred format and quality.\n   * @return {import(\"../source/IIIF.js\").Options} IIIF tile source ready constructor options.\n   * @api\n   */\n  getTileSourceOptions(opt_preferredOptions) {\n    const options = opt_preferredOptions || {},\n      version = this.getImageApiVersion();\n    if (version === undefined) {\n      return;\n    }\n    const imageOptions =\n      version === undefined ? undefined : versionFunctions[version](this);\n    if (imageOptions === undefined) {\n      return;\n    }\n    return {\n      url: imageOptions.url,\n      version: version,\n      size: [this.imageInfo.width, this.imageInfo.height],\n      sizes: imageOptions.sizes,\n      format:\n        options.format !== undefined &&\n        includes(imageOptions.formats, options.format)\n          ? options.format\n          : imageOptions.preferredFormat !== undefined\n          ? imageOptions.preferredFormat\n          : 'jpg',\n      supports: imageOptions.supports,\n      quality:\n        options.quality && includes(imageOptions.qualities, options.quality)\n          ? options.quality\n          : includes(imageOptions.qualities, 'native')\n          ? 'native'\n          : 'default',\n      resolutions: Array.isArray(imageOptions.resolutions)\n        ? imageOptions.resolutions.sort(function (a, b) {\n            return b - a;\n          })\n        : undefined,\n      tileSize: imageOptions.tileSize,\n    };\n  }\n}\n\nexport default IIIFInfo;\n","/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {includes} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [opt_options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(opt_options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const options = opt_options || {};\n\n    let interpolate =\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    let baseUrl = options.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = options.version || Versions.VERSION2;\n    const sizes = options.sizes || [];\n    const size = options.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      60\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = options.tileSize;\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const format = options.format || 'jpg';\n    const quality =\n      options.quality ||\n      (options.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = options.resolutions || [];\n    const supports = options.supports || [];\n    const extent = options.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (includes(supports, 'regionByPx') || includes(supports, 'regionByPct')) &&\n      (includes(supports, 'sizeByWh') ||\n        includes(supports, 'sizeByH') ||\n        includes(supports, 'sizeByW') ||\n        includes(supports, 'sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          includes(supports, 'regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (includes(supports, 'regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || includes(supports, 'sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || includes(supports, 'sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (includes(supports, 'sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (includes(supports, 'sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (includes(supports, 'sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      })\n    );\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n  }\n}\n\nexport default IIIF;\n","import IIIF from '../src/ol/source/IIIF.js';\nimport IIIFInfo from '../src/ol/format/IIIFInfo.js';\nimport Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\n\nconst layer = new TileLayer(),\n  map = new Map({\n    layers: [layer],\n    target: 'map',\n  }),\n  notifyDiv = document.getElementById('iiif-notification'),\n  urlInput = document.getElementById('imageInfoUrl'),\n  displayButton = document.getElementById('display');\n\nfunction refreshMap(imageInfoUrl) {\n  fetch(imageInfoUrl)\n    .then(function (response) {\n      response\n        .json()\n        .then(function (imageInfo) {\n          const options = new IIIFInfo(imageInfo).getTileSourceOptions();\n          if (options === undefined || options.version === undefined) {\n            notifyDiv.textContent =\n              'Data seems to be no valid IIIF image information.';\n            return;\n          }\n          options.zDirection = -1;\n          const iiifTileSource = new IIIF(options);\n          layer.setSource(iiifTileSource);\n          map.setView(\n            new View({\n              resolutions: iiifTileSource.getTileGrid().getResolutions(),\n              extent: iiifTileSource.getTileGrid().getExtent(),\n              constrainOnlyCenter: true,\n            })\n          );\n          map.getView().fit(iiifTileSource.getTileGrid().getExtent());\n          notifyDiv.textContent = '';\n        })\n        .catch(function (body) {\n          notifyDiv.textContent = 'Could not read image info json. ' + body;\n        });\n    })\n    .catch(function () {\n      notifyDiv.textContent = 'Could not read data from URL.';\n    });\n}\n\ndisplayButton.addEventListener('click', function () {\n  refreshMap(urlInput.value);\n});\n\nrefreshMap(urlInput.value);\n"],"names":["Versions","IIIF_PROFILE_VALUES","supports","formats","qualities","COMPLIANCE_VERSION1","COMPLIANCE_VERSION2","COMPLIANCE_VERSION3","versionFunctions","iiifInfo","levelProfile","getComplianceLevelSupportedFeatures","undefined","url","imageInfo","replace","resolutions","scale_factors","tileSize","tile_width","tile_height","additionalProfile","Array","isArray","profile","length","profileSupports","profileFormats","profileQualities","sizes","map","size","width","height","tiles","tile","scaleFactors","extraFormats","preferredFormat","preferredFormats","filter","format","includes","reduce","acc","extraFeatures","extraQualities","IIIFInfo","this","setImageInfo","JSON","parse","context","i","getComplianceLevelEntryFromProfile","identifier","assert","version","getImageApiVersion","test","complianceLevel","level","match","getComplianceLevelFromProfile","opt_preferredOptions","options","imageOptions","quality","sort","a","b","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","opt_options","interpolate","imageSmoothing","baseUrl","lastIndexOf","isNaN","tileWidth","tileHeight","maxZoom","tilePixelRatio","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","DEFAULT_TILE_SIZE","Math","max","ceil","log","LN2","push","pow","maxScaleFactor","round","ignoredSizesIndex","resolution","splice","tileGrid","TileGrid","origin","getTopLeft","IiifTileClass","CustomTile","toSize","attributions","attributionsCollapsible","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","state","tileClass","tileUrlFunction","tileCoord","pixelRatio","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","regionWidth","regionHeight","transition","zDirection","TileImage","layer","TileLayer","Map","layers","target","notifyDiv","document","getElementById","urlInput","refreshMap","imageInfoUrl","fetch","then","response","json","getTileSourceOptions","iiifTileSource","setSource","setView","View","getTileGrid","getResolutions","getExtent","constrainOnlyCenter","getView","fit","textContent","catch","body","addEventListener","value"],"sourceRoot":""}