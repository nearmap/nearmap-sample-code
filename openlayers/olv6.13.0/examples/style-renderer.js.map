{"version":3,"file":"style-renderer.js","mappings":"gMASMA,EAAO,IAAIC,EAAAA,EACXC,EAAS,IAAIC,EAAAA,EAAO,CACxBC,MAAO,wBACPC,MAAO,IAEHC,EAAQ,IAAIC,EAAAA,GAAM,CACtBC,SAAU,SAAUC,EAAkBC,GACpC,IAAMC,EAAUD,EAAMC,QAChBC,EAAWF,EAAME,SAASC,QAChCD,EAASE,eAAeL,GACxB,IAAMM,EAASH,EAASI,YAClBX,GAAQY,EAAAA,EAAAA,IAASF,GACjBG,GAASC,EAAAA,EAAAA,IAAUJ,GACnBK,EAAOV,EAAMW,QAAQC,IAAI,QAC/B,MAAKF,GAAQF,EAAS,GAAKb,EAAQ,GAAnC,CAKAM,EAAQY,OACR,IAAMC,GAAgBC,EAAAA,EAAAA,IAAUd,EAAS,CACvCe,WAAY,IAEdF,EAAcG,mBAAmB3B,EAAME,GACvCsB,EAAcI,aAAahB,GAC3BD,EAAQkB,OAGR,IAAMC,GAAaC,EAAAA,EAAAA,IAAchB,GAC3BiB,EAAOF,EAAW,GAClBG,EAASH,EAAW,GAC1BnB,EAAQuB,UAAUd,EAAMY,EAAMC,EAAQ5B,EAAOa,GAC7CP,EAAQwB,cAINC,EAAc,IAAIC,EAAAA,EAAY,CAClCC,OAAQ,IAAIC,EAAAA,EAAa,CACvBC,IAAK,yFACLC,OAAQ,IAAIC,EAAAA,IAEdpC,MAAOA,IAIT8B,EAAYO,YAAYC,GAAG,cAAc,SAAUC,GACjD,IAAMxB,EAAUwB,EAAMxB,QAChByB,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WACX3B,EAAQ4B,IAAI,OAAQH,IAEtBA,EAAII,IACF,4BAA8B7B,EAAQC,IAAI,UAAU6B,cAAgB,UAGxE,IAAIC,EAAAA,EAAI,CACNC,OAAQ,CAACjB,GACTkB,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","sources":["webpack:///./style-renderer.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\nimport {getBottomLeft, getHeight, getWidth} from '../src/ol/extent.js';\nimport {toContext} from '../src/ol/render.js';\n\nconst fill = new Fill();\nconst stroke = new Stroke({\n  color: 'rgba(255,255,255,0.8)',\n  width: 2,\n});\nconst style = new Style({\n  renderer: function (pixelCoordinates, state) {\n    const context = state.context;\n    const geometry = state.geometry.clone();\n    geometry.setCoordinates(pixelCoordinates);\n    const extent = geometry.getExtent();\n    const width = getWidth(extent);\n    const height = getHeight(extent);\n    const flag = state.feature.get('flag');\n    if (!flag || height < 1 || width < 1) {\n      return;\n    }\n\n    // Stitch out country shape from the blue canvas\n    context.save();\n    const renderContext = toContext(context, {\n      pixelRatio: 1,\n    });\n    renderContext.setFillStrokeStyle(fill, stroke);\n    renderContext.drawGeometry(geometry);\n    context.clip();\n\n    // Fill transparent country with the flag image\n    const bottomLeft = getBottomLeft(extent);\n    const left = bottomLeft[0];\n    const bottom = bottomLeft[1];\n    context.drawImage(flag, left, bottom, width, height);\n    context.restore();\n  },\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'https://openlayersbook.github.io/openlayers_book_samples/assets/data/countries.geojson',\n    format: new GeoJSON(),\n  }),\n  style: style,\n});\n\n// Load country flags and set them as `flag` attribute on the country feature\nvectorLayer.getSource().on('addfeature', function (event) {\n  const feature = event.feature;\n  const img = new Image();\n  img.onload = function () {\n    feature.set('flag', img);\n  };\n  img.src =\n    'https://flagcdn.com/w320/' + feature.get('iso_a2').toLowerCase() + '.png';\n});\n\nnew Map({\n  layers: [vectorLayer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n"],"names":["fill","Fill","stroke","Stroke","color","width","style","Style","renderer","pixelCoordinates","state","context","geometry","clone","setCoordinates","extent","getExtent","getWidth","height","getHeight","flag","feature","get","save","renderContext","toContext","pixelRatio","setFillStrokeStyle","drawGeometry","clip","bottomLeft","getBottomLeft","left","bottom","drawImage","restore","vectorLayer","VectorLayer","source","VectorSource","url","format","GeoJSON","getSource","on","event","img","Image","onload","set","src","toLowerCase","Map","layers","target","view","View","center","zoom"],"sourceRoot":""}