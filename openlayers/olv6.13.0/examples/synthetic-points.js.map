{"version":3,"file":"synthetic-points.js","mappings":"yFAYA,I,2HAFMA,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAC3BH,EAASG,GAAK,IAAIC,EAAAA,EAAQ,CACxB,SAAY,IAAIC,EAAAA,EAAM,CACpB,EAAIH,EAAII,KAAKC,SAAWL,EACxB,EAAIA,EAAII,KAAKC,SAAWL,IAE1B,EAAKC,EACL,KAAQA,EAAI,EAAI,GAAK,KAIzB,IAAMK,EAAS,CACb,GAAM,IAAIC,EAAAA,GAAM,CACdC,MAAO,IAAIC,EAAAA,EAAY,CACrBC,OAAQ,EACRC,KAAM,IAAIC,EAAAA,EAAK,CAACC,MAAO,YACvBC,OAAQ,IAAIC,EAAAA,EAAO,CAACF,MAAO,UAAWG,MAAO,QAGjD,GAAM,IAAIT,EAAAA,GAAM,CACdC,MAAO,IAAIC,EAAAA,EAAY,CACrBC,OAAQ,GACRC,KAAM,IAAIC,EAAAA,EAAK,CAACC,MAAO,YACvBC,OAAQ,IAAIC,EAAAA,EAAO,CAACF,MAAO,UAAWG,MAAO,SAK7CC,EAAe,IAAIC,EAAAA,EAAa,CACpCpB,SAAUA,EACVqB,OAAO,IAEHC,EAAS,IAAIC,EAAAA,EAAY,CAC7BC,OAAQL,EACRM,MAAO,SAAUC,GACf,OAAOlB,EAAOkB,EAAQC,IAAI,YAIxBC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CAACR,GACTS,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAINC,EAAQ,KACRC,EAAO,KACLC,EAAc,SAAUC,GAC5B,IAAMC,EAAiBvB,EAAawB,8BAA8BF,GAClE,GAAuB,OAAnBC,EACFJ,EAAQ,KACRC,EAAO,SACF,CACL,IACMK,EADWF,EAAeG,cACFC,gBAAgBL,GAChC,OAAVH,EACFA,EAAQ,IAAIjC,EAAAA,EAAMuC,GAElBN,EAAMS,eAAeH,GAEV,OAATL,EACFA,EAAO,IAAIS,EAAAA,EAAW,CAACP,EAAYG,IAEnCL,EAAKQ,eAAe,CAACN,EAAYG,IAGrChB,EAAIqB,UAGNrB,EAAIsB,GAAG,eAAe,SAAUC,GAC9B,IAAIA,EAAIC,SAAR,CAGA,IAAMX,EAAab,EAAIyB,mBAAmBF,EAAIG,eAC9Cd,EAAYC,OAGdb,EAAIsB,GAAG,SAAS,SAAUC,GACxBX,EAAYW,EAAIV,eAGlB,IAAMzB,EAAS,IAAIC,EAAAA,EAAO,CACxBF,MAAO,sBACPG,MAAO,IAEHO,EAAQ,IAAIhB,EAAAA,GAAM,CACtBO,OAAQA,EACRN,MAAO,IAAIC,EAAAA,EAAY,CACrBC,OAAQ,GACRI,OAAQA,MAIZM,EAAO4B,GAAG,cAAc,SAAUC,GAChC,IAAMI,GAAgBC,EAAAA,EAAAA,IAAiBL,GACvCI,EAAcE,SAAShC,GACT,OAAVa,GACFiB,EAAcG,aAAapB,GAEhB,OAATC,GACFgB,EAAcG,aAAanB,MAI/BX,EAAIsB,GAAG,eAAe,SAAUC,GAC9B,IAAIA,EAAIC,SAAR,CAGA,IAAMO,EAAQ/B,EAAIgC,cAAcT,EAAIG,eAC9BO,EAAMjC,EAAIkC,kBAAkBH,GAEhC/B,EAAImC,YAAYtC,MAAMuC,OADpBH,EAC6B,UAEA,S","sources":["webpack:///./synthetic-points.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport {getVectorContext} from '../src/ol/render.js';\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 18000000;\nfor (let i = 0; i < count; ++i) {\n  features[i] = new Feature({\n    'geometry': new Point([\n      2 * e * Math.random() - e,\n      2 * e * Math.random() - e,\n    ]),\n    'i': i,\n    'size': i % 2 ? 10 : 20,\n  });\n}\n\nconst styles = {\n  '10': new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1}),\n    }),\n  }),\n  '20': new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1}),\n    }),\n  }),\n};\n\nconst vectorSource = new VectorSource({\n  features: features,\n  wrapX: false,\n});\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function (feature) {\n    return styles[feature.get('size')];\n  },\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nlet point = null;\nlet line = null;\nconst displaySnap = function (coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    if (line === null) {\n      line = new LineString([coordinate, closestPoint]);\n    } else {\n      line.setCoordinates([coordinate, closestPoint]);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function (evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,255,0,0.9)',\n  width: 3,\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 10,\n    stroke: stroke,\n  }),\n});\n\nvector.on('postrender', function (evt) {\n  const vectorContext = getVectorContext(evt);\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  const hit = map.hasFeatureAtPixel(pixel);\n  if (hit) {\n    map.getTarget().style.cursor = 'pointer';\n  } else {\n    map.getTarget().style.cursor = '';\n  }\n});\n"],"names":["features","Array","e","i","Feature","Point","Math","random","styles","Style","image","CircleStyle","radius","fill","Fill","color","stroke","Stroke","width","vectorSource","VectorSource","wrapX","vector","VectorLayer","source","style","feature","get","map","Map","layers","target","document","getElementById","view","View","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","closestPoint","getGeometry","getClosestPoint","setCoordinates","LineString","render","on","evt","dragging","getEventCoordinate","originalEvent","vectorContext","getVectorContext","setStyle","drawGeometry","pixel","getEventPixel","hit","hasFeatureAtPixel","getTarget","cursor"],"sourceRoot":""}