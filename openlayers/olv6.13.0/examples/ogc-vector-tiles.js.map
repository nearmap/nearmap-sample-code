{"version":3,"file":"ogc-vector-tiles.js","mappings":"+8CAmGA,EApDMA,SAAAA,I,4SAIJ,WAAYC,GAAS,O,4FAAA,SACnB,cAAM,CACJC,aAAcD,EAAQC,aACtBC,wBAAyBF,EAAQE,wBACjCC,UAAWH,EAAQG,UACnBC,OAAQJ,EAAQI,OAChBC,SAAUL,EAAQK,SAClBC,WAAYN,EAAQM,WACpBC,UAAWP,EAAQO,UACnBC,WAAYR,EAAQQ,WACpBC,MAAOT,EAAQS,MACfC,WAAYV,EAAQU,WACpBC,MAAOC,EAAAA,EAAAA,UAGT,IAAMC,EAAa,CACjBC,IAAKd,EAAQc,IACbR,WAAY,EAAKS,gBACjBC,UAAWhB,EAAQgB,UACnBC,oBAAqBjB,EAAQI,OAAOa,oBACpCC,QAASlB,EAAQkB,SAAW,MApBX,OAuBnBC,EAAAA,EAAAA,IAAeN,GACZO,KAAK,EAAKC,mBAAmBC,KAAxB,OACLC,MAAM,EAAKC,aAAaF,KAAlB,OAzBU,E,+CAgCrB,SAAmBG,GACjBC,KAAKC,SAAWF,EAAYG,KAC5BF,KAAKG,mBAAmBJ,EAAYK,YAAaL,EAAYM,aAC7DL,KAAKM,SAASpB,EAAAA,EAAAA,S,0BAOhB,SAAaqB,GACXC,QAAQD,MAAMA,GACdP,KAAKM,SAASpB,EAAAA,EAAAA,Y,gFAhDZb,CAAsBoC,EAAAA,G,oBCzChB,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,MACRC,OAAQ,CACN,IAAIC,EAAAA,EAAgB,CAClBC,OAAQ,IAAIzC,EAAc,CACxBe,IAAK,iHACLV,OAAQ,IAAIqC,EAAAA,OAIlBC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","sources":["webpack:///../src/ol/source/OGCVectorTile.js","webpack:///./ogc-vector-tiles.js"],"sourcesContent":["/**\n * @module ol/source/OGCVectorTile\n */\n\nimport SourceState from './State.js';\nimport VectorTile from './VectorTile.js';\nimport {getTileSetInfo} from './ogcTileUtil.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} url URL to the OGC Vector Tileset endpoint.\n * @property {Object} [context] A lookup of values to use in the tile URL template.  The `{tileMatrix}`\n * (zoom level), `{tileRow}`, and `{tileCol}` variables in the URL will always be provided by the source.\n * @property {import(\"../format/Feature.js\").default} format Feature parser for tiles.\n * @property {string} [mediaType] The content type for the tiles (e.g. \"application/vnd.mapbox-vector-tile\").  If not provided,\n * the source will try to find a link with rel=\"item\" that uses a vector type supported by the configured format.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for map tiles from an [OGC API - Tiles](https://ogcapi.ogc.org/tiles/) service that provides \"vector\" type tiles.\n * The service must conform to at least the core (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core)\n * and tileset (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset) conformance classes.\n *\n * Vector tile sets may come in a variety of formats (e.g. GeoJSON, MVT).  The `format` option is used to determine\n * which of the advertised media types is used.  If you need to force the use of a particular media type, you can\n * provide the `mediaType` option.\n */\nclass OGCVectorTile extends VectorTile {\n  /**\n   * @param {Options} options OGC vector tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      format: options.format,\n      overlaps: options.overlaps,\n      projection: options.projection,\n      tileClass: options.tileClass,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n      state: SourceState.LOADING,\n    });\n\n    const sourceInfo = {\n      url: options.url,\n      projection: this.getProjection(),\n      mediaType: options.mediaType,\n      supportedMediaTypes: options.format.supportedMediaTypes,\n      context: options.context || null,\n    };\n\n    getTileSetInfo(sourceInfo)\n      .then(this.handleTileSetInfo_.bind(this))\n      .catch(this.handleError_.bind(this));\n  }\n\n  /**\n   * @param {import(\"./ogcTileUtil.js\").TileSetInfo} tileSetInfo Tile set info.\n   * @private\n   */\n  handleTileSetInfo_(tileSetInfo) {\n    this.tileGrid = tileSetInfo.grid;\n    this.setTileUrlFunction(tileSetInfo.urlFunction, tileSetInfo.urlTemplate);\n    this.setState(SourceState.READY);\n  }\n\n  /**\n   * @private\n   * @param {Error} error The error.\n   */\n  handleError_(error) {\n    console.error(error); // eslint-disable-line no-console\n    this.setState(SourceState.ERROR);\n  }\n}\n\nexport default OGCVectorTile;\n","import MVT from '../src/ol/format/MVT.js';\nimport Map from '../src/ol/Map.js';\nimport OGCVectorTile from '../src/ol/source/OGCVectorTile.js';\nimport VectorTileLayer from '../src/ol/layer/VectorTile.js';\nimport View from '../src/ol/View.js';\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new VectorTileLayer({\n      source: new OGCVectorTile({\n        url: 'https://maps.ecere.com/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad',\n        format: new MVT(),\n      }),\n    }),\n  ],\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n"],"names":["OGCVectorTile","options","attributions","attributionsCollapsible","cacheSize","format","overlaps","projection","tileClass","transition","wrapX","zDirection","state","SourceState","sourceInfo","url","getProjection","mediaType","supportedMediaTypes","context","getTileSetInfo","then","handleTileSetInfo_","bind","catch","handleError_","tileSetInfo","this","tileGrid","grid","setTileUrlFunction","urlFunction","urlTemplate","setState","error","console","VectorTile","Map","target","layers","VectorTileLayer","source","MVT","view","View","center","zoom"],"sourceRoot":""}