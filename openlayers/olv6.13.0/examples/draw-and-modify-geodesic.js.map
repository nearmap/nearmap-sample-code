{"version":3,"file":"draw-and-modify-geodesic.js","mappings":"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","sources":["webpack:///./draw-and-modify-geodesic.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Draw, Modify, Snap} from '../src/ol/interaction.js';\nimport {GeometryCollection, Point, Polygon} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {circular} from '../src/ol/geom/Polygon.js';\nimport {getDistance} from '../src/ol/sphere.js';\nimport {transform} from '../src/ol/proj.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#33cc33',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: '#ffcc33',\n    }),\n  }),\n});\n\nconst geodesicStyle = new Style({\n  geometry: function (feature) {\n    return feature.get('modifyGeometry') || feature.getGeometry();\n  },\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#ff3333',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0)',\n    }),\n  }),\n});\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    const geometry = feature.getGeometry();\n    return geometry.getType() === 'GeometryCollection' ? geodesicStyle : style;\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 6600000],\n    zoom: 3,\n  }),\n});\n\nconst defaultStyle = new Modify({source: source})\n  .getOverlay()\n  .getStyleFunction();\n\nconst modify = new Modify({\n  source: source,\n  style: function (feature) {\n    feature.get('features').forEach(function (modifyFeature) {\n      const modifyGeometry = modifyFeature.get('modifyGeometry');\n      if (modifyGeometry) {\n        const modifyPoint = feature.getGeometry().getCoordinates();\n        const geometries = modifyFeature.getGeometry().getGeometries();\n        const polygon = geometries[0].getCoordinates()[0];\n        const center = geometries[1].getCoordinates();\n        const projection = map.getView().getProjection();\n        let first, last, radius;\n        if (modifyPoint[0] === center[0] && modifyPoint[1] === center[1]) {\n          // center is being modified\n          // get unchanged radius from diameter between polygon vertices\n          first = transform(polygon[0], projection, 'EPSG:4326');\n          last = transform(\n            polygon[(polygon.length - 1) / 2],\n            projection,\n            'EPSG:4326'\n          );\n          radius = getDistance(first, last) / 2;\n        } else {\n          // radius is being modified\n          first = transform(center, projection, 'EPSG:4326');\n          last = transform(modifyPoint, projection, 'EPSG:4326');\n          radius = getDistance(first, last);\n        }\n        // update the polygon using new center or radius\n        const circle = circular(\n          transform(center, projection, 'EPSG:4326'),\n          radius,\n          128\n        );\n        circle.transform('EPSG:4326', projection);\n        geometries[0].setCoordinates(circle.getCoordinates());\n        // save changes to be applied at the end of the interaction\n        modifyGeometry.setGeometries(geometries);\n      }\n    });\n    return defaultStyle(feature);\n  },\n});\n\nmodify.on('modifystart', function (event) {\n  event.features.forEach(function (feature) {\n    const geometry = feature.getGeometry();\n    if (geometry.getType() === 'GeometryCollection') {\n      feature.set('modifyGeometry', geometry.clone(), true);\n    }\n  });\n});\n\nmodify.on('modifyend', function (event) {\n  event.features.forEach(function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    if (modifyGeometry) {\n      feature.setGeometry(modifyGeometry);\n      feature.unset('modifyGeometry', true);\n    }\n  });\n});\n\nmap.addInteraction(modify);\n\nlet draw, snap; // global so we can remove them later\nconst typeSelect = document.getElementById('type');\n\nfunction addInteractions() {\n  let value = typeSelect.value;\n  let geometryFunction;\n  if (value === 'Geodesic') {\n    value = 'Circle';\n    geometryFunction = function (coordinates, geometry, projection) {\n      if (!geometry) {\n        geometry = new GeometryCollection([\n          new Polygon([]),\n          new Point(coordinates[0]),\n        ]);\n      }\n      const geometries = geometry.getGeometries();\n      const center = transform(coordinates[0], projection, 'EPSG:4326');\n      const last = transform(coordinates[1], projection, 'EPSG:4326');\n      const radius = getDistance(center, last);\n      const circle = circular(center, radius, 128);\n      circle.transform('EPSG:4326', projection);\n      geometries[0].setCoordinates(circle.getCoordinates());\n      geometry.setGeometries(geometries);\n      return geometry;\n    };\n  }\n  draw = new Draw({\n    source: source,\n    type: value,\n    geometryFunction: geometryFunction,\n  });\n  map.addInteraction(draw);\n  snap = new Snap({source: source});\n  map.addInteraction(snap);\n}\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  map.removeInteraction(snap);\n  addInteractions();\n};\n\naddInteractions();\n"],"names":["draw","snap","raster","TileLayer","source","OSM","VectorSource","style","Style","fill","Fill","color","stroke","Stroke","width","image","CircleStyle","radius","geodesicStyle","geometry","feature","get","getGeometry","vector","VectorLayer","getType","map","Map","layers","target","view","View","center","zoom","defaultStyle","Modify","getOverlay","getStyleFunction","modify","forEach","modifyFeature","modifyGeometry","first","last","modifyPoint","getCoordinates","geometries","getGeometries","polygon","projection","getView","getProjection","transform","length","getDistance","circle","circular","setCoordinates","setGeometries","on","event","features","set","clone","setGeometry","unset","addInteraction","typeSelect","document","getElementById","addInteractions","geometryFunction","value","coordinates","GeometryCollection","Polygon","Point","Draw","type","Snap","onchange","removeInteraction"],"sourceRoot":""}