{"version":3,"file":"mapbox-vector-layer.js","mappings":"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","sources":["webpack:///../src/ol/layer/MapboxVector.js","webpack:///./mapbox-vector-layer.js"],"sourcesContent":["/**\n * @module ol/layer/MapboxVector\n */\nimport BaseEvent from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport MVT from '../format/MVT.js';\nimport SourceState from '../source/State.js';\nimport VectorTileLayer from '../layer/VectorTile.js';\nimport VectorTileSource from '../source/VectorTile.js';\nimport {applyBackground, applyStyle, setupVectorSource} from 'ol-mapbox-style';\n\nconst mapboxBaseUrl = 'https://api.mapbox.com';\n\n/**\n * Gets the path from a mapbox:// URL.\n * @param {string} url The Mapbox URL.\n * @return {string} The path.\n * @private\n */\nexport function getMapboxPath(url) {\n  const startsWith = 'mapbox://';\n  if (url.indexOf(startsWith) !== 0) {\n    return '';\n  }\n  return url.slice(startsWith.length);\n}\n\n/**\n * Turns mapbox:// sprite URLs into resolvable URLs.\n * @param {string} url The sprite URL.\n * @param {string} token The access token.\n * @param {string} styleUrl The style URL.\n * @return {string} A resolvable URL.\n * @private\n */\nexport function normalizeSpriteUrl(url, token, styleUrl) {\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return decodeURI(new URL(url, styleUrl).href);\n  }\n  const startsWith = 'sprites/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected sprites url: ${url}`);\n  }\n  const sprite = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseUrl}/styles/v1/${sprite}/sprite?access_token=${token}`;\n}\n\n/**\n * Turns mapbox:// glyphs URLs into resolvable URLs.\n * @param {string} url The glyphs URL.\n * @param {string} token The access token.\n * @param {string} styleUrl The style URL.\n * @return {string} A resolvable URL.\n * @private\n */\nexport function normalizeGlyphsUrl(url, token, styleUrl) {\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return decodeURI(new URL(url, styleUrl).href);\n  }\n  const startsWith = 'fonts/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected fonts url: ${url}`);\n  }\n  const font = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseUrl}/fonts/v1/${font}/0-255.pbf?access_token=${token}`;\n}\n\n/**\n * Turns mapbox:// style URLs into resolvable URLs.\n * @param {string} url The style URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nexport function normalizeStyleUrl(url, token) {\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return decodeURI(new URL(url, location.href).href);\n  }\n  const startsWith = 'styles/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected style url: ${url}`);\n  }\n  const style = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseUrl}/styles/v1/${style}?&access_token=${token}`;\n}\n\n/**\n * Turns mapbox:// source URLs into vector tile URL templates.\n * @param {string} url The source URL.\n * @param {string} token The access token.\n * @param {string} tokenParam The access token key.\n * @param {string} styleUrl The style URL.\n * @return {string} A vector tile template.\n * @private\n */\nexport function normalizeSourceUrl(url, token, tokenParam, styleUrl) {\n  const urlObject = new URL(url, styleUrl);\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    if (!token) {\n      return decodeURI(urlObject.href);\n    }\n    urlObject.searchParams.set(tokenParam, token);\n    return decodeURI(urlObject.href);\n  }\n  return `https://{a-d}.tiles.mapbox.com/v4/${mapboxPath}/{z}/{x}/{y}.vector.pbf?access_token=${token}`;\n}\n\n/**\n * @classdesc\n * Event emitted on configuration or loading error.\n */\nclass ErrorEvent extends BaseEvent {\n  /**\n   * @param {Error} error error object.\n   */\n  constructor(error) {\n    super(EventType.ERROR);\n\n    /**\n     * @type {Error}\n     */\n    this.error = error;\n  }\n}\n\n/**\n * @typedef {Object} StyleObject\n * @property {Object<string, SourceObject>} sources The style sources.\n * @property {string} sprite The sprite URL.\n * @property {string} glyphs The glyphs URL.\n * @property {Array<LayerObject>} layers The style layers.\n */\n\n/**\n * @typedef {Object} SourceObject\n * @property {string} url The source URL.\n * @property {SourceType} type The source type.\n * @property {Array<string>} [tiles] TileJSON tiles.\n */\n\n/**\n * The Mapbox source type.\n * @enum {string}\n */\nconst SourceType = {\n  VECTOR: 'vector',\n};\n\n/**\n * @typedef {Object} LayerObject\n * @property {string} id The layer id.\n * @property {string} type The layer type.\n * @property {string} source The source id.\n * @property {Object} layout The layout.\n * @property {Object} paint The paint.\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} styleUrl The URL of the Mapbox style object to use for this layer.  For a\n * style created with Mapbox Studio and hosted on Mapbox, this will look like\n * 'mapbox://styles/you/your-style'.\n * @property {string} [accessToken] The access token for your Mapbox style. This has to be provided\n * for `mapbox://` style urls. For `https://` and other urls, any access key must be the last query\n * parameter of the style url.\n * @property {string} [source] If your style uses more than one source, you need to use either the\n * `source` property or the `layers` property to limit rendering to a single vector source.  The\n * `source` property corresponds to the id of a vector source in your Mapbox style.\n * @property {Array<string>} [layers] Limit rendering to the list of included layers.  All layers\n * must share the same vector source.  If your style uses more than one source, you need to use\n * either the `source` property or the `layers` property to limit rendering to a single vector\n * source.\n * @property {boolean} [declutter=true] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n *\n * As an optimization decluttered features from layers with the same `className` are rendered above\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\n * behavior and place declutterd features with their own layer configure the layer with a `className`\n * other than `ol-layer`.\n * @property {import(\"./Base.js\").BackgroundColor|false} [background] Background color for the layer.\n * If not specified, the background from the Mapbox style object will be used. Set to `false` to prevent\n * the Mapbox style's background from being used.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible. If neither `maxResolution` nor `minZoom` are defined, the layer's `maxResolution` will\n * match the style source's `minzoom`.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will\n * be visible. If neither `maxResolution` nor `minZoom` are defined, the layer's `minZoom` will match\n * the style source's `minzoom`.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the\n * renderer when getting features from the vector tile for the rendering or hit-detection.\n * Recommended value: Vector tiles are usually generated with a buffer, so this value should match\n * the largest possible buffer of the used tiles. It should be at least the size of the largest\n * point symbol or line width.\n * @property {import(\"./VectorTileRenderType.js\").default|string} [renderMode='hybrid'] Render mode for vector tiles:\n *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom\n *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on\n *    rotated views.\n *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector\n *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of\n *    another layer with the same source).\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be\n * recreated during animations. This means that no vectors will be shown clipped, but the setting\n * will have a performance impact for large amounts of vector data. When set to `false`, batches\n * will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be\n * recreated during interactions. See also `updateWhileAnimating`.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * A vector tile layer based on a Mapbox style that uses a single vector source.  Configure\n * the layer with the `styleUrl` and `accessToken` shown in Mapbox Studio's share panel.\n * If the style uses more than one source, use the `source` property to choose a single\n * vector source.  If you want to render a subset of the layers in the style, use the `layers`\n * property (all layers must share the same vector source).  See the constructor options for\n * more detail.\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new MapboxVectorLayer({\n *           styleUrl: 'mapbox://styles/mapbox/bright-v9',\n *           accessToken: 'your-mapbox-access-token-here'\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * On configuration or loading error, the layer will trigger an `'error'` event.  Listeners\n * will receive an object with an `error` property that can be used to diagnose the problem.\n *\n * @param {Options} options Options.\n * @extends {VectorTileLayer}\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nclass MapboxVectorLayer extends VectorTileLayer {\n  /**\n   * @param {Options} options Layer options.  At a minimum, `styleUrl` and `accessToken`\n   * must be provided.\n   */\n  constructor(options) {\n    const declutter = 'declutter' in options ? options.declutter : true;\n    const source = new VectorTileSource({\n      state: SourceState.LOADING,\n      format: new MVT(),\n    });\n\n    super({\n      source: source,\n      background: options.background,\n      declutter: declutter,\n      className: options.className,\n      opacity: options.opacity,\n      visible: options.visible,\n      zIndex: options.zIndex,\n      minResolution: options.minResolution,\n      maxResolution: options.maxResolution,\n      minZoom: options.minZoom,\n      maxZoom: options.maxZoom,\n      renderOrder: options.renderOrder,\n      renderBuffer: options.renderBuffer,\n      renderMode: options.renderMode,\n      map: options.map,\n      updateWhileAnimating: options.updateWhileAnimating,\n      updateWhileInteracting: options.updateWhileInteracting,\n      preload: options.preload,\n      useInterimTilesOnError: options.useInterimTilesOnError,\n      properties: options.properties,\n    });\n\n    this.setMaxResolutionFromTileGrid_ =\n      options.maxResolution === undefined && options.minZoom === undefined;\n\n    this.sourceId = options.source;\n    this.layers = options.layers;\n\n    if (options.accessToken) {\n      this.accessToken = options.accessToken;\n    } else {\n      const url = new URL(options.styleUrl, location.href);\n      // The last search parameter is the access token\n      url.searchParams.forEach((value, key) => {\n        this.accessToken = value;\n        this.accessTokenParam_ = key;\n      });\n    }\n    this.fetchStyle(options.styleUrl);\n  }\n\n  /**\n   * Fetch the style object.\n   * @param {string} styleUrl The URL of the style to load.\n   * @protected\n   */\n  fetchStyle(styleUrl) {\n    const url = normalizeStyleUrl(styleUrl, this.accessToken);\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\n            `unexpected response when fetching style: ${response.status}`\n          );\n        }\n        return response.json();\n      })\n      .then((style) => {\n        this.onStyleLoad(style, url.startsWith('data:') ? location.href : url);\n      })\n      .catch((error) => {\n        this.handleError(error);\n      });\n  }\n\n  /**\n   * Handle the loaded style object.\n   * @param {StyleObject} style The loaded style.\n   * @param {string} styleUrl The URL of the style.\n   * @protected\n   */\n  onStyleLoad(style, styleUrl) {\n    let sourceId;\n    let sourceIdOrLayersList;\n    if (this.layers) {\n      // confirm all layers share the same source\n      const lookup = {};\n      for (let i = 0; i < style.layers.length; ++i) {\n        const layer = style.layers[i];\n        if (layer.source) {\n          lookup[layer.id] = layer.source;\n        }\n      }\n      let firstSource;\n      for (let i = 0; i < this.layers.length; ++i) {\n        const candidate = lookup[this.layers[i]];\n        if (!candidate) {\n          this.handleError(\n            new Error(`could not find source for ${this.layers[i]}`)\n          );\n          return;\n        }\n        if (!firstSource) {\n          firstSource = candidate;\n        } else if (firstSource !== candidate) {\n          this.handleError(\n            new Error(\n              `layers can only use a single source, found ${firstSource} and ${candidate}`\n            )\n          );\n          return;\n        }\n      }\n      sourceId = firstSource;\n      sourceIdOrLayersList = this.layers;\n    } else {\n      sourceId = this.sourceId;\n      sourceIdOrLayersList = sourceId;\n    }\n\n    if (!sourceIdOrLayersList) {\n      // default to the first source in the style\n      sourceId = Object.keys(style.sources)[0];\n      sourceIdOrLayersList = sourceId;\n    }\n\n    if (style.sprite) {\n      style.sprite = normalizeSpriteUrl(\n        style.sprite,\n        this.accessToken,\n        styleUrl\n      );\n    }\n\n    if (style.glyphs) {\n      style.glyphs = normalizeGlyphsUrl(\n        style.glyphs,\n        this.accessToken,\n        styleUrl\n      );\n    }\n\n    const styleSource = style.sources[sourceId];\n    if (styleSource.type !== SourceType.VECTOR) {\n      this.handleError(\n        new Error(`only works for vector sources, found ${styleSource.type}`)\n      );\n      return;\n    }\n\n    const source = this.getSource();\n    if (styleSource.url && styleSource.url.indexOf('mapbox://') === 0) {\n      // Tile source url, handle it directly\n      source.setUrl(\n        normalizeSourceUrl(\n          styleSource.url,\n          this.accessToken,\n          this.accessTokenParam_,\n          styleUrl\n        )\n      );\n      applyStyle(this, style, sourceIdOrLayersList)\n        .then(() => {\n          this.configureSource(source, style);\n        })\n        .catch((error) => {\n          this.handleError(error);\n        });\n    } else {\n      // TileJSON url, let ol-mapbox-style handle it\n      if (styleSource.tiles) {\n        styleSource.tiles = styleSource.tiles.map((url) =>\n          normalizeSourceUrl(\n            url,\n            this.accessToken,\n            this.accessTokenParam_,\n            styleUrl\n          )\n        );\n      }\n      setupVectorSource(\n        styleSource,\n        styleSource.url\n          ? normalizeSourceUrl(\n              styleSource.url,\n              this.accessToken,\n              this.accessTokenParam_,\n              styleUrl\n            )\n          : undefined\n      ).then((source) => {\n        applyStyle(this, style, sourceIdOrLayersList)\n          .then(() => {\n            this.configureSource(source, style);\n          })\n          .catch((error) => {\n            this.configureSource(source, style);\n            this.handleError(error);\n          });\n      });\n    }\n  }\n\n  /**\n   * Applies configuration from the provided source to this layer's source,\n   * and reconfigures the loader to add a feature that renders the background,\n   * if the style is configured with a background.\n   * @param {import(\"../source/VectorTile.js\").default} source The source to configure from.\n   * @param {StyleObject} style The style to configure the background from.\n   */\n  configureSource(source, style) {\n    const targetSource = this.getSource();\n    if (source !== targetSource) {\n      targetSource.setAttributions(source.getAttributions());\n      targetSource.setTileUrlFunction(source.getTileUrlFunction());\n      targetSource.setTileLoadFunction(source.getTileLoadFunction());\n      targetSource.tileGrid = source.tileGrid;\n    }\n    if (this.getBackground() === undefined) {\n      applyBackground(this, style);\n    }\n    if (this.setMaxResolutionFromTileGrid_) {\n      const tileGrid = targetSource.getTileGrid();\n      this.setMaxResolution(tileGrid.getResolution(tileGrid.getMinZoom()));\n    }\n    targetSource.setState(SourceState.READY);\n  }\n\n  /**\n   * Handle configuration or loading error.\n   * @param {Error} error The error.\n   * @protected\n   */\n  handleError(error) {\n    this.dispatchEvent(new ErrorEvent(error));\n    const source = this.getSource();\n    source.setState(SourceState.ERROR);\n  }\n}\n\nexport default MapboxVectorLayer;\n","import Map from '../src/ol/Map.js';\nimport MapboxVector from '../src/ol/layer/MapboxVector.js';\nimport View from '../src/ol/View.js';\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new MapboxVector({\n      styleUrl: 'mapbox://styles/mapbox/bright-v9',\n      accessToken:\n        'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2t0cGdwMHVnMGdlbzMxbDhwazBic2xrNSJ9.WbcTL9uj8JPAsnT9mgb7oQ',\n    }),\n  ],\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n"],"names":["mapboxBaseUrl","getMapboxPath","url","startsWith","indexOf","slice","length","normalizeSourceUrl","token","tokenParam","styleUrl","urlObject","URL","mapboxPath","searchParams","set","decodeURI","href","ErrorEvent","error","EventType","BaseEvent","SourceType","MapboxVectorLayer","options","declutter","source","VectorTileSource","state","SourceState","format","MVT","background","className","opacity","visible","zIndex","minResolution","maxResolution","minZoom","maxZoom","renderOrder","renderBuffer","renderMode","map","updateWhileAnimating","updateWhileInteracting","preload","useInterimTilesOnError","properties","setMaxResolutionFromTileGrid_","undefined","sourceId","layers","accessToken","location","forEach","value","key","accessTokenParam_","fetchStyle","Error","style","normalizeStyleUrl","this","fetch","then","response","ok","status","json","onStyleLoad","catch","handleError","sourceIdOrLayersList","firstSource","lookup","i","layer","id","candidate","Object","keys","sources","sprite","normalizeSpriteUrl","glyphs","font","normalizeGlyphsUrl","styleSource","type","getSource","setUrl","applyStyle","configureSource","tiles","setupVectorSource","targetSource","setAttributions","getAttributions","setTileUrlFunction","getTileUrlFunction","setTileLoadFunction","getTileLoadFunction","tileGrid","getBackground","applyBackground","getTileGrid","setMaxResolution","getResolution","getMinZoom","setState","dispatchEvent","VectorTileLayer","Map","target","MapboxVector","view","View","center","zoom"],"sourceRoot":""}