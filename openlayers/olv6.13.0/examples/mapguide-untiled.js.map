{"version":3,"file":"mapguide-untiled.js","mappings":"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","sources":["webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assign} from '../obj.js';\nimport {\n  containsExtent,\n  getCenter,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    let interpolate =\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    super({\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    let image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(\n        this.url_,\n        this.params_,\n        extent,\n        size,\n        projection\n      );\n      image = new ImageWrapper(\n        extent,\n        resolution,\n        pixelRatio,\n        imageUrl,\n        this.crossOrigin_,\n        this.imageLoadFunction_\n      );\n      image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this)\n      );\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_\n        ? 'GETDYNAMICMAPOVERLAYIMAGE'\n        : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1],\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  } else {\n    return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n  }\n}\n\nexport default ImageMapGuide;\n","import ImageLayer from '../src/ol/layer/Image.js';\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\n\nconst mdf = 'Library://Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\nconst agentUrl = 'https://mikenunn.net/mapguide/mapagent/mapagent.fcgi?';\nconst bounds = [\n  -87.865114442365922, 43.665065564837931, -87.595394059497067,\n  43.823852564430069,\n];\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      extent: bounds,\n      source: new ImageMapGuide({\n        projection: 'EPSG:4326',\n        url: agentUrl,\n        useOverlay: false,\n        metersPerUnit: 111319.4908, //value returned from mapguide\n        params: {\n          MAPDEFINITION: mdf,\n          FORMAT: 'PNG',\n          VERSION: '3.0.0',\n          USERNAME: 'OLGuest',\n          PASSWORD: 'olguest',\n        },\n        ratio: 2,\n      }),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [-87.7302542509315, 43.744459064634],\n    projection: 'EPSG:4326',\n    zoom: 12,\n  }),\n});\n"],"names":["ImageMapGuide","options","interpolate","undefined","imageSmoothing","projection","resolutions","crossOrigin_","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","defaultImageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","this","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","containsExtent","getExtent","slice","scaleFromCenter","size","getWidth","getHeight","imageUrl","getUrl","ImageWrapper","addEventListener","EventType","handleImageChange","bind","assign","changed","baseUrl","scale","dpi","mcsW","mcsH","devW","devH","mpp","getScale","center","getCenter","baseParams","Math","round","appendParams","ImageSource","Map","layers","ImageLayer","source","MAPDEFINITION","FORMAT","VERSION","USERNAME","PASSWORD","target","view","View","zoom"],"sourceRoot":""}