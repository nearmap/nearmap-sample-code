{"version":3,"file":"modify-scale-and-rotate.js","mappings":"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","sources":["webpack:///./modify-scale-and-rotate.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Draw, Modify, Translate} from '../src/ol/interaction.js';\nimport {MultiPoint, Point} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getCenter, getHeight, getWidth} from '../src/ol/extent.js';\nimport {\n  never,\n  platformModifierKeyOnly,\n  primaryAction,\n} from '../src/ol/events/condition.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst style = new Style({\n  geometry: function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    return modifyGeometry ? modifyGeometry.geometry : feature.getGeometry();\n  },\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#ffcc33',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: '#ffcc33',\n    }),\n  }),\n});\n\nfunction calculateCenter(geometry) {\n  let center, coordinates, minRadius;\n  const type = geometry.getType();\n  if (type === 'Polygon') {\n    let x = 0;\n    let y = 0;\n    let i = 0;\n    coordinates = geometry.getCoordinates()[0].slice(1);\n    coordinates.forEach(function (coordinate) {\n      x += coordinate[0];\n      y += coordinate[1];\n      i++;\n    });\n    center = [x / i, y / i];\n  } else if (type === 'LineString') {\n    center = geometry.getCoordinateAt(0.5);\n    coordinates = geometry.getCoordinates();\n  } else {\n    center = getCenter(geometry.getExtent());\n  }\n  let sqDistances;\n  if (coordinates) {\n    sqDistances = coordinates.map(function (coordinate) {\n      const dx = coordinate[0] - center[0];\n      const dy = coordinate[1] - center[1];\n      return dx * dx + dy * dy;\n    });\n    minRadius = Math.sqrt(Math.max.apply(Math, sqDistances)) / 3;\n  } else {\n    minRadius =\n      Math.max(\n        getWidth(geometry.getExtent()),\n        getHeight(geometry.getExtent())\n      ) / 3;\n  }\n  return {\n    center: center,\n    coordinates: coordinates,\n    minRadius: minRadius,\n    sqDistances: sqDistances,\n  };\n}\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    const styles = [style];\n    const modifyGeometry = feature.get('modifyGeometry');\n    const geometry = modifyGeometry\n      ? modifyGeometry.geometry\n      : feature.getGeometry();\n    const result = calculateCenter(geometry);\n    const center = result.center;\n    if (center) {\n      styles.push(\n        new Style({\n          geometry: new Point(center),\n          image: new CircleStyle({\n            radius: 4,\n            fill: new Fill({\n              color: '#ff3333',\n            }),\n          }),\n        })\n      );\n      const coordinates = result.coordinates;\n      if (coordinates) {\n        const minRadius = result.minRadius;\n        const sqDistances = result.sqDistances;\n        const rsq = minRadius * minRadius;\n        const points = coordinates.filter(function (coordinate, index) {\n          return sqDistances[index] > rsq;\n        });\n        styles.push(\n          new Style({\n            geometry: new MultiPoint(points),\n            image: new CircleStyle({\n              radius: 4,\n              fill: new Fill({\n                color: '#33cc33',\n              }),\n            }),\n          })\n        );\n      }\n    }\n    return styles;\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4,\n  }),\n});\n\nconst defaultStyle = new Modify({source: source})\n  .getOverlay()\n  .getStyleFunction();\n\nconst modify = new Modify({\n  source: source,\n  condition: function (event) {\n    return primaryAction(event) && !platformModifierKeyOnly(event);\n  },\n  deleteCondition: never,\n  insertVertexCondition: never,\n  style: function (feature) {\n    feature.get('features').forEach(function (modifyFeature) {\n      const modifyGeometry = modifyFeature.get('modifyGeometry');\n      if (modifyGeometry) {\n        const point = feature.getGeometry().getCoordinates();\n        let modifyPoint = modifyGeometry.point;\n        if (!modifyPoint) {\n          // save the initial geometry and vertex position\n          modifyPoint = point;\n          modifyGeometry.point = modifyPoint;\n          modifyGeometry.geometry0 = modifyGeometry.geometry;\n          // get anchor and minimum radius of vertices to be used\n          const result = calculateCenter(modifyGeometry.geometry0);\n          modifyGeometry.center = result.center;\n          modifyGeometry.minRadius = result.minRadius;\n        }\n\n        const center = modifyGeometry.center;\n        const minRadius = modifyGeometry.minRadius;\n        let dx, dy;\n        dx = modifyPoint[0] - center[0];\n        dy = modifyPoint[1] - center[1];\n        const initialRadius = Math.sqrt(dx * dx + dy * dy);\n        if (initialRadius > minRadius) {\n          const initialAngle = Math.atan2(dy, dx);\n          dx = point[0] - center[0];\n          dy = point[1] - center[1];\n          const currentRadius = Math.sqrt(dx * dx + dy * dy);\n          if (currentRadius > 0) {\n            const currentAngle = Math.atan2(dy, dx);\n            const geometry = modifyGeometry.geometry0.clone();\n            geometry.scale(currentRadius / initialRadius, undefined, center);\n            geometry.rotate(currentAngle - initialAngle, center);\n            modifyGeometry.geometry = geometry;\n          }\n        }\n      }\n    });\n    return defaultStyle(feature);\n  },\n});\n\nmodify.on('modifystart', function (event) {\n  event.features.forEach(function (feature) {\n    feature.set(\n      'modifyGeometry',\n      {geometry: feature.getGeometry().clone()},\n      true\n    );\n  });\n});\n\nmodify.on('modifyend', function (event) {\n  event.features.forEach(function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    if (modifyGeometry) {\n      feature.setGeometry(modifyGeometry.geometry);\n      feature.unset('modifyGeometry', true);\n    }\n  });\n});\n\nmap.addInteraction(modify);\nmap.addInteraction(\n  new Translate({\n    condition: function (event) {\n      return primaryAction(event) && platformModifierKeyOnly(event);\n    },\n    layers: [vector],\n  })\n);\n\nlet draw; // global so we can remove it later\nconst typeSelect = document.getElementById('type');\n\nfunction addInteractions() {\n  draw = new Draw({\n    source: source,\n    type: typeSelect.value,\n  });\n  map.addInteraction(draw);\n}\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteractions();\n};\n\naddInteractions();\n"],"names":["raster","TileLayer","source","OSM","VectorSource","style","Style","geometry","feature","modifyGeometry","get","getGeometry","fill","Fill","color","stroke","Stroke","width","image","CircleStyle","radius","calculateCenter","center","coordinates","minRadius","sqDistances","type","getType","x","y","i","getCoordinates","slice","forEach","coordinate","getCoordinateAt","getCenter","getExtent","map","dx","dy","Math","sqrt","max","apply","getWidth","getHeight","draw","vector","VectorLayer","styles","result","push","Point","rsq","points","filter","index","MultiPoint","Map","layers","target","view","View","zoom","defaultStyle","Modify","getOverlay","getStyleFunction","modify","condition","event","primaryAction","platformModifierKeyOnly","deleteCondition","never","insertVertexCondition","modifyFeature","point","modifyPoint","geometry0","initialRadius","initialAngle","atan2","currentRadius","currentAngle","clone","scale","undefined","rotate","on","features","set","setGeometry","unset","addInteraction","Translate","typeSelect","document","getElementById","addInteractions","Draw","value","onchange","removeInteraction"],"sourceRoot":""}