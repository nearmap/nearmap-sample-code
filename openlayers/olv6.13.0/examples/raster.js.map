{"version":3,"file":"raster.js","mappings":"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","sources":["webpack:///./raster.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport RasterSource from '../src/ol/source/Raster.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\n\nconst minVgi = 0;\nconst maxVgi = 0.5;\nconst bins = 10;\n\n/**\n * Calculate the Vegetation Greenness Index (VGI) from an input pixel.  This\n * is a rough estimate assuming that pixel values correspond to reflectance.\n * @param {Array<number>} pixel An array of [R, G, B, A] values.\n * @return {number} The VGI value for the given pixel.\n */\nfunction vgi(pixel) {\n  const r = pixel[0] / 255;\n  const g = pixel[1] / 255;\n  const b = pixel[2] / 255;\n  return (2 * g - r - b) / (2 * g + r + b);\n}\n\n/**\n * Summarize values for a histogram.\n * @param {numver} value A VGI value.\n * @param {Object} counts An object for keeping track of VGI counts.\n */\nfunction summarize(value, counts) {\n  const min = counts.min;\n  const max = counts.max;\n  const num = counts.values.length;\n  if (value < min) {\n    // do nothing\n  } else if (value >= max) {\n    counts.values[num - 1] += 1;\n  } else {\n    const index = Math.floor((value - min) / counts.delta);\n    counts.values[index] += 1;\n  }\n}\n\n/**\n * Use aerial imagery as the input data for the raster source.\n */\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst aerial = new XYZ({\n  attributions: attributions,\n  url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n  maxZoom: 20,\n  crossOrigin: '',\n});\n\n/**\n * Create a raster source where pixels with VGI values above a threshold will\n * be colored green.\n */\nconst raster = new RasterSource({\n  sources: [aerial],\n  /**\n   * Run calculations on pixel data.\n   * @param {Array} pixels List of pixels (one per source).\n   * @param {Object} data User data object.\n   * @return {Array} The output pixel.\n   */\n  operation: function (pixels, data) {\n    const pixel = pixels[0];\n    const value = vgi(pixel);\n    summarize(value, data.counts);\n    if (value >= data.threshold) {\n      pixel[0] = 0;\n      pixel[1] = 255;\n      pixel[2] = 0;\n      pixel[3] = 128;\n    } else {\n      pixel[3] = 0;\n    }\n    return pixel;\n  },\n  lib: {\n    vgi: vgi,\n    summarize: summarize,\n  },\n});\nraster.set('threshold', 0.25);\n\nfunction createCounts(min, max, num) {\n  const values = new Array(num);\n  for (let i = 0; i < num; ++i) {\n    values[i] = 0;\n  }\n  return {\n    min: min,\n    max: max,\n    values: values,\n    delta: (max - min) / num,\n  };\n}\n\nraster.on('beforeoperations', function (event) {\n  event.data.counts = createCounts(minVgi, maxVgi, bins);\n  event.data.threshold = raster.get('threshold');\n});\n\nraster.on('afteroperations', function (event) {\n  schedulePlot(event.resolution, event.data.counts, event.data.threshold);\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: aerial,\n    }),\n    new ImageLayer({\n      source: raster,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [-9651695, 4937351],\n    zoom: 13,\n    minZoom: 12,\n    maxZoom: 19,\n  }),\n});\n\nlet timer = null;\nfunction schedulePlot(resolution, counts, threshold) {\n  if (timer) {\n    clearTimeout(timer);\n    timer = null;\n  }\n  timer = setTimeout(plot.bind(null, resolution, counts, threshold), 1000 / 60);\n}\n\nconst barWidth = 15;\nconst plotHeight = 150;\nconst chart = d3\n  .select('#plot')\n  .append('svg')\n  .attr('width', barWidth * bins)\n  .attr('height', plotHeight);\n\nconst chartRect = chart.node().getBoundingClientRect();\n\nconst tip = d3.select(document.body).append('div').attr('class', 'tip');\n\nfunction plot(resolution, counts, threshold) {\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(counts.values)])\n    .range([0, plotHeight]);\n\n  const bar = chart.selectAll('rect').data(counts.values);\n\n  bar.enter().append('rect');\n\n  bar\n    .attr('class', function (count, index) {\n      const value = counts.min + index * counts.delta;\n      return 'bar' + (value >= threshold ? ' selected' : '');\n    })\n    .attr('width', barWidth - 2);\n\n  bar\n    .transition()\n    .attr('transform', function (value, index) {\n      return (\n        'translate(' +\n        index * barWidth +\n        ', ' +\n        (plotHeight - yScale(value)) +\n        ')'\n      );\n    })\n    .attr('height', yScale);\n\n  bar.on('mousemove', function () {\n    const index = bar.nodes().indexOf(this);\n    const threshold = counts.min + index * counts.delta;\n    if (raster.get('threshold') !== threshold) {\n      raster.set('threshold', threshold);\n      raster.changed();\n    }\n  });\n\n  bar.on('mouseover', function (event) {\n    const index = bar.nodes().indexOf(this);\n    let area = 0;\n    for (let i = counts.values.length - 1; i >= index; --i) {\n      area += resolution * resolution * counts.values[i];\n    }\n    tip.html(message(counts.min + index * counts.delta, area));\n    tip.style('display', 'block');\n    tip\n      .transition()\n      .style('left', chartRect.left + index * barWidth + barWidth / 2 + 'px')\n      .style('top', event.y - 60 + 'px')\n      .style('opacity', 1);\n  });\n\n  bar.on('mouseout', function () {\n    tip\n      .transition()\n      .style('opacity', 0)\n      .on('end', function () {\n        tip.style('display', 'none');\n      });\n  });\n}\n\nfunction message(value, area) {\n  const acres = (area / 4046.86)\n    .toFixed(0)\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return acres + ' acres at<br>' + value.toFixed(2) + ' VGI or above';\n}\n"],"names":["Map","RasterSource","View","XYZ","Image","ImageLayer","Tile","TileLayer","minVgi","maxVgi","bins","vgi","pixel","r","g","b","summarize","value","counts","min","max","num","values","length","index","Math","floor","delta","key","attributions","aerial","url","maxZoom","crossOrigin","raster","sources","operation","pixels","data","threshold","lib","set","createCounts","Array","i","on","event","get","schedulePlot","resolution","map","layers","source","target","view","center","zoom","minZoom","timer","clearTimeout","setTimeout","plot","bind","barWidth","plotHeight","chart","d3","select","append","attr","chartRect","node","getBoundingClientRect","tip","document","body","yScale","scaleLinear","domain","range","bar","selectAll","enter","count","transition","nodes","indexOf","changed","area","html","message","style","left","y","acres","toFixed","replace"],"sourceRoot":""}